/* ------------------------------------------------------------------------------
 * Copyright (c) 2006 Novell, Inc. All Rights Reserved.
 *
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of version 2 of the GNU General Public License as published by the
 * Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail, you may find
 * current contact information at www.novell.com.
 * ------------------------------------------------------------------------------
 */

/**
 * File:	modules/defaults_options.ycp
 * Package:	Configuration of multipath
 * Summary:	global default option stuffs for multipath configuration
 * Authors:	Coly Li <coyli@suse.de>
 *
 * $Id: options.ycp,v 1.49 2007/01/22 03:25:16 coly Exp $
 *
 * Global default option sutffs for multipath configurations, this file is included
 * by complex.ycp.
 * The default options can be used in defauts section, and other sections.
 */
{

textdomain "multipath";

/* hold temporary customized string value of combobox */
map temp_string_values = $[];
boolean replacewidget_notify = false;
/*
    get a new id for new item, this will help to make each item unique.
*/
string get_newid(list<map> items){
    integer newid = 0;
    foreach(map e, items, {
	integer e_id = 0;
	e_id = tointeger(e["id"]:"0");
	if(newid < e_id)
	    newid = e_id;
    });
    newid = newid + 1;
    return tostring(newid);
}

/* 
   remove all the quotes at head and end. 
   ignore quotes in the be middle of value 
*/
string rm_quotes(string value)
{
    integer str_len = 0;
    integer str_start = 0;
    integer str_end = 0;

    str_len = size(value);
    if(str_len <= 0)
	return "";
    str_end = str_len - 1;
    while(str_start < str_len)
    {
	string cur_char = substring(value, str_start, 1);
	if (cur_char == " " || 
	    cur_char == "\t" ||
	    cur_char == "\r" ||
	    cur_char == "\n" ||
	    cur_char == "\"")
	{
		str_start = str_start + 1;
		continue;
	}
	break;
    }

    while(str_end > str_start)
    {
	string cur_char = substring(value, str_end, 1);
	if (cur_char == " " || 
	    cur_char == "\t" ||
	    cur_char == "\r" ||
	    cur_char == "\n" ||
	    cur_char == "\"")
	{
		str_end = str_end - 1;
		continue;
	}
	break;
    }
    string result = "";
    if (str_end >= str_start)
	result = substring(value, str_start, str_end - str_start + 1);
    return result;
}

/*
    add quotes to configuration value, no matter how many words.
    if the value has quotes pair, do not touch it.
    if more than 1 quote at the head or end, only keep one.
    if there are quote inside the value, ignore.
*/
string add_quotes (string value) 
{
    string result = rm_quotes(value);
    if (size(result) > 0)
	result = "\"" + result + "\"";
    return result;
}

map optlabel = $["polling_interval"	: "polling_interval",
		"udev_dir"		: "udev_dir",
		"selector"		: "selector",
		"path_selector"		: "path_selector",
		"path_grouping_policy"	: "path_grouping_policy",
		"getuid_callout"	: "getuid_callout",
		"prio_callout"		: "prio_callout",
		"features"		: "features",
		"path_checker"		: "path_checker",
		"failback"		: "failback",
		"rr_min_io"		: "rr_min_io",
		"rr_weight"		: "rr_weight",
		"no_path_retry"		: "no_path_retry",
		"user_friendly_names"	: "user_friendly_names",
		"wwid"			: "wwid",
		"devnode"		: "devnode",
		"alias"			: "alias",
		"vendor"		: "vendor",
		"product"		: "product",
		"product_blacklist"	: "product_blacklist",
		"hardware_handler"	: "hardware_handler"
    		];



string build_valid_chars(string key)
{
    map valid_chars = $[
	"path"		: " %./-_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789",
	"wwid"		: ".-_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789",
	"number"	: "0123456789",
	"devnode"	: " ^!\".*?()|[]/\\-_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789",
	"vendor"	: " ^!\".*?()|[]/\\-_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789",
	"product"	: " ^!\".*?()|[]/\\-_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789",
	"product_blacklist": " ^!\".*?()|[]/\\-_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789",
	"hardware_handler": " ^!\".*?()|[]/\\-_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789",
	"alias"		: ".-_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
	];
    if (haskey(valid_chars, key) == false)
    {
	Popup::Message(sformat("can not find valid chars for %1", key));
	return "";
    }
    else
	return valid_chars[key]:"";
}

list build_combobox_list(map opts)
{
    list combobox_list = [];
    foreach(map e, opts["list"]:[], {
	string opt_str = e["optstr"]:"NA";
	symbol id = e["id"]:`id;
	term item = `item(`id(id), opt_str);
	combobox_list = add(combobox_list, item);
    });
    if (combobox_list == [])
	Popup::Message("build_combobox_list: nexpected empty combobox list.");
    return combobox_list;
}



map polling_interval_opts = $["type" : "textentry", "entry" : 
		$["name" : optlabel["polling_interval"]:"NA", "id" : `polling_interval]
	];

term build_polling_interval_term(symbol opt)
{
    map entry = polling_interval_opts["entry"]:$[];
    term ret = `Empty();
    if (entry != $[])
    {
	symbol id = entry["id"]:`id;
	string label_str = entry["name"]:"NA";
	ret = `TextEntry(`id(id), `opt(`notify), label_str, "");
    } else {
	Popup::Message("polling_interval_opts[\"entry\"] is not defined");
    }
    return ret;
}

void update_polling_interval_term(map item)
{
    string value = item["polling_interval"]:"";
    UI::ChangeWidget(`id(`polling_interval), `ValidChars, build_valid_chars("number"));
    UI::ChangeWidget(`id(`polling_interval), `Value, value);
}

map polling_interval_handler(map item)
{
    string value = "";
    any ret = UI::QueryWidget(`id(`polling_interval), `Value);
    if (is(ret, string) == true)
	value = (string) ret;
    else
	Popup::Message(sformat("polling_interval_handler: unexpectd ret %1", ret));
    item["polling_interval"] = value;
    return item;
}

map check_polling_interval(map item)
{
    map ret = $[];
    string value = item["polling_interval"]:"";
    if (value == "")
    {
	ret["result"] = true;
	ret["info"] = "";
    } else if (value != "0" && substring(value, 0, 1) == "0") {
	ret["result"] = false;
	ret["info"] = "* \"polling_interval\" " + _("should be a decimal integer") + "\n";
    } else if (tointeger(value) == nil ||
		value != tostring(tointeger(value))) {
	ret["result"] = false;
	ret["info"] = "* \"polling_interval\" " + _("illegal value") + "\n";
    } else if (tointeger(value) < 0) {
	ret["result"] = false;
	ret["info"] = "* \"polling_interval\" " + _("should be greater than 0") + "\n";
    } else if (value == tostring(tointeger(value))) {
	ret["result"] = true;
	ret["info"] = "";
    } else {
	ret["result"] = false;
	ret["info"] = "* \"polling_interval\" " + _("illegal value") + "\n";
    }
    return ret;
}

map udev_dir_opts = $["type" : "textentry", "entry" :
		$["name" : optlabel["udev_dir"]:"NA", "id" : `udev_dir]
	];

term build_udev_dir_term(symbol opt)
{
    map entry = udev_dir_opts["entry"]:$[];
    term ret = `Empty();
    if (entry != $[])
    {
	symbol id = entry["id"]:`id;
	string label_str = entry["name"]:"NA";
	ret = `TextEntry(`id(id), `opt(`notify), label_str, "");
    } else {
	Popup::Message("udev_dir_opts[\"entry\"] is not defined");
    }
    return ret;
}

void update_udev_dir_term(map item)
{
    string value = item["udev_dir"]:(string)"";
    UI::ChangeWidget(`id(`udev_dir), `ValidChars, build_valid_chars("path"));
    UI::ChangeWidget(`id(`udev_dir), `Value, value);
}

map udev_dir_handler(map item)
{
    string value = "";
    any ret = UI::QueryWidget(`id(`udev_dir), `Value);
    if (is(ret, string))
	value = (string) ret;
    else
	Popup::Message(sformat("udev_dir_handler: unexpected ret %1", ret));
    item["udev_dir"] = value;
    return item;
}

map check_udev_dir(map item)
{
    string header = "* \"udev_dir\" ";
    map ret = $[];
    string value = item["udev_dir"]:"";

    if (value == "" ||
	value == toascii(value))
    {
	ret["result"] = true;
	ret["info"] = "";
    } else {
	ret["result"] = false;
	ret["info"] = header + _("illegal value") + "\n";
    }
    return ret;
}

map selector_opts = $["type":"combobox", "list":[
		$["name" : "round_robin", "id" : `round_robin, "optstr" : "\"round-robin 0\""],
		$["name" : "none", "id" : `none, "optstr" : ""]
	]];

term build_selector_term(symbol opt)
{
    term ret = `Empty();
    if (opt == `combobox_only)
	ret = `ComboBox(`id(`selector),
			`opt(`notify),
			optlabel["selector"]:"NA", 
			build_combobox_list(selector_opts));
    else if (opt == `all)
	ret = `ReplacePoint(`id(`replace_selector),
		    `ComboBox(`id(`selector),
			`opt(`notify),
			optlabel["selector"]:"NA", 
			build_combobox_list(selector_opts)));
    else
	Popup::Message(sformat("build_selector_term: unexpected opt %1", opt));
    return ret;
}

void update_selector_term(map item)
{
    string value = item["selector"]:"";
    if (value == "round-robin 0")
	UI::ChangeWidget(`id(`selector), `Value, `round_robin);
    else if (value == "")
	UI::ChangeWidget(`id(`selector), `Value, `none);
    else 
	Popup::Message(sformat("update_selector_term: unexpected value %1", value));
}

map selector_handler(map item)
{
    string value = "";
    any ret = UI::QueryWidget(`id(`selector), `Value);
    if (ret == `round_robin)
        value = "round-robin 0";
    else if (ret == `none)
        value = "";
    else
        Popup::Message(sformat("selector_handler: unexpected ret %1", ret));
    item["selector"] = value;
    return item;
}

map check_selector(map item)
{
    string header = "* \"selector\" ";
    map ret = $[];
    string value = item["selector"]:"";
    if (value == "" ||
                value == "round-robin 0") {
        ret["result"] = true;
        ret["info"] = "";
    } else {
        ret["result"] = false;
        ret["info"] = header + _("illegal value") + "\n";
    }
    return ret;
}

map path_selector_opts = $["type":"combobox", "list":[
		$["name" : "round_robin", "id" : `round_robin, "optstr" : "\"round-robin 0\""],
		$["name" : "none", "id" : `none, "optstr" : ""]
	]];

term build_path_selector_term(symbol opt)
{
    term ret = `Empty();
    if (opt == `combobox_only)
	ret = `ComboBox(`id(`path_selector), 
			`opt(`notify), 
			optlabel["path_selector"]:"NA", 
			build_combobox_list(path_selector_opts));
    else if (opt == `all)
	ret = `ReplacePoint(`id(`replace_path_selector),
			`ComboBox(`id(`path_selector), 
			    `opt(`notify), 
			    optlabel["path_selector"]:"NA", 
			    build_combobox_list(path_selector_opts)));
    else
	Popup::Message(sformat("build_path_selector_term: unexpected opt %1", ret));
    return ret;
}

void update_path_selector_term(map item)
{
    string value = item["path_selector"]:"";
    if (value == "round-robin 0")
	UI::ChangeWidget(`id(`path_selector), `Value, `round_robin);
    else if (value == "")
	UI::ChangeWidget(`id(`path_selector), `Value, `none);
    else
	Popup::Message(sformat("update_path_selector_term: unexpected value %1", value));
}

map path_selector_handler(map item)
{
    string value = "";
    any ret = UI::QueryWidget(`id(`path_selector), `Value);
    if (ret == `round_robin)
	value = "round-robin 0";
    else if (ret == `none)
	value = "";
    else
	Popup::Message(sformat("path_selector_handler: unexpected ret %1", ret));
    item["path_selector"] = value;
    return item;
}

map check_path_selector(map item)
{
    map ret = $[];
    string value = item["path_selector"]:"";
    if (value == "" ||
		value == "round-robin 0") {
	ret["result"] = true;
	ret["info"] = "";
    } else {
	ret["result"] = false;
	ret["info"] = "* \"path_selector\" " + _("illegal value") + "\n";
    }
    return ret;
}

map path_gp_opts = $["type" : "combobox", "list" : [
		$["name" : "failover", "id" : `failover, "optstr" : "failover"],
		$["name" : "multibus", "id" : `multibus, "optstr" : "multibus"],
		$["name" : "group_by_serial", "id" : `group_by_serial, "optstr" : "group_by_serial"],
		$["name" : "group_by_prio", "id" : `group_by_prio, "optstr" : "group_by_prio"],
		$["name" : "group_by_node_name", "id" : `group_by_node_name, "optstr" : "group_by_node_name"],
		$["name" : "none", "id" : `none, "optstr" : ""]
	]];

term build_path_gp_term(symbol opt)
{
    return `ComboBox(`id(`path_grouping_policy), 
			`opt(`notify), 
			optlabel["path_grouping_policy"]:"NA",
			build_combobox_list(path_gp_opts));
}

void update_path_gp_term(map item)
{
    string value = "";
    string id = "";

    value = item["path_grouping_policy"]:"";
    if (value == "failover")
	UI::ChangeWidget(`id(`path_grouping_policy), `Value, `failover);
    else if (value == "multibus")
	UI::ChangeWidget(`id(`path_grouping_policy), `Value, `multibus);
    else if (value == "group_by_serial")
	UI::ChangeWidget(`id(`path_grouping_policy), `Value, `group_by_serial);
    else if (value == "group_by_prio")
	UI::ChangeWidget(`id(`path_grouping_policy), `Value, `group_by_prio);
    else if (value == "group_by_node_name")
	UI::ChangeWidget(`id(`path_grouping_policy), `Value, `group_by_node_name);
    else
	UI::ChangeWidget(`id(`path_grouping_policy), `Value, `none);
}

map path_gp_handler(map item)
{
    string value = "";
    any ret = UI::QueryWidget(`id(`path_grouping_policy), `Value);
    if (ret == `none)
	value = "";
    else if (ret == `failover)
	value = "failover";
    else if (ret == `multibus)
	value = "multibus";
    else if (ret == `group_by_serial)
	value = "group_by_serial";
    else if (ret == `group_by_prio)
	value = "group_by_prio";
    else if (ret == `group_by_node_name)
	value  = "group_by_node_name";
    else
	Popup::Message(sformat("path_gp_handler: unexpected ret %1", ret));
    item["path_grouping_policy"] = value;
    return item;
}

map check_path_gp(map item)
{
    map ret = $[];
    string value = item["path_grouping_policy"]:"";
    if (value == "" ||
	value == "failover" ||
	value == "multibus" ||
	value == "group_by_serial" ||
	value == "group_by_prio" ||
	value == "group_by_node_name")
    {
	ret["result"] = true;
	ret["info"] = "";
    } else {
	ret["result"] = false;
	ret["info"] = "* \"path_grouping_policy\" " + _("illegal value") + "\n";
    }
    return ret;
}

map getuid_callout_opts = $["type" : "combobox", "list" : [
		$["name" : "default", "id" : `default, "optstr" : "\"/sbin/scsi_id -g -u -s\""],
		$["name" : "customized_str", "id" : `customized_str, "optstr" : "\(callout path string\)"]
	]];

term build_getuid_callout_term(symbol opt)
{
    term ret = `Empty();
    if (opt == `combobox_only)
	ret = `ComboBox(`id(`getuid_callout),
		    `opt(`notify), 
		    optlabel["getuid_callout"]:"NA",
		    build_combobox_list(getuid_callout_opts));
    else if (opt == `editable_combobox_only)
	ret = `ComboBox(`id(`getuid_callout),
		    `opt(`notify, `editable), 
		    optlabel["getuid_callout"]:"NA",
		    build_combobox_list(getuid_callout_opts));
    else if (opt == `all)
	ret = `ReplacePoint(`id(`replace_getuid_callout), 
		    `ComboBox(`id(`getuid_callout),
			`opt(`notify), 
			optlabel["getuid_callout"]:"NA",
			build_combobox_list(getuid_callout_opts)));
    else
	Popup::Message(sformat("build_getuid_callout_term: unexpected opt %1", opt));
    return ret;
}

void update_getuid_callout_term(map item)
{
    string value = item["getuid_callout"]:"";
    if (value == "/sbin/scsi_id -g -u -s" )
	UI::ChangeWidget(`id(`getuid_callout), `Value, `default);
    else 
    {
	UI::ReplaceWidget(`id(`replace_getuid_callout),
				build_getuid_callout_term(`editable_combobox_only));
	UI::ChangeWidget(`id(`getuid_callout), 
				`ValidChars, build_valid_chars("path"));
	UI::ChangeWidget(`id(`getuid_callout), `Value, value);
	UI::SetFocus(`id(`getuid_callout));
    }
}

map getuid_callout_handler(map item)
{
    string value = "";
    any ret = UI::QueryWidget(`id(`getuid_callout), `Value);
    if (ret == `default)
    {
	UI::ReplaceWidget(`id(`replace_getuid_callout),
		build_getuid_callout_term(`combobox_only));
        UI::ChangeWidget(`id(`getuid_callout), `Value, `default);
	value = "/sbin/scsi_id -g -u -s";
    } else if (ret == `customized_str) {
	value = temp_string_values["getuid_callout"]:"";
	UI::ReplaceWidget(`id(`replace_getuid_callout), build_getuid_callout_term(`editable_combobox_only));
	UI::ChangeWidget(`id(`getuid_callout), `ValidChars, build_valid_chars("path"));
	UI::ChangeWidget(`id(`getuid_callout), `Value, value);
	UI::SetFocus(`id(`getuid_callout));
//	replacewidget_notify = true;
    } else if (ret == "") {
	value = "";
    } else if ((string) ret == toascii((string) ret)) {
	value = (string) ret;
	temp_string_values["getuid_callout"] = value;
    } else {
        Popup::Message(sformat("getuid_callout_handler: unexpected ret %1", ret));
    }
    item["getuid_callout"] = value;
    return item;
}

map check_getuid_callout(map item)
{
    string header = "* \"getuid_callout\" ";
    map ret = $[];
    string value = item["getuid_callout"]:"";

    if (value == "" ||
	value == "/sbin/scsi_id -g -u -s") 
    {
	ret["result"] = true;
	ret["info"] = "";
    } else if (value == toascii(value)) {
	ret["result"] = true;
	ret["info"] = "";
    } else {
	ret["result"] = false;
	ret["info"] = header + _("illegal value") + "\n";
    }
    return ret;
}

map prio_callout_opts = $["type" : "combobox", "list" : [
	$["name" : "prio_emc", "id" : `prio_emc, "optstr" : "\"mpath_prio_emc /dev/%n\""],
	$["name" : "prio_alua", "id" : `prio_alua, "optstr" : "\"mpath_prio_alua /dev/%n\""],
	$["name" : "prio_netapp", "id" : `prio_netapp, "optstr" : "\"mpath_prio_netapp /dev/%n\""],
	$["name" : "prio_tpc", "id" : `prio_tpc, "optstr" : "\"mpath_prio_tpc /dev/%n\""],
	$["name" : "prio_hp_sw", "id" : `prio_hp_sw, "optstr" : "\"mpath_prio_hp_sw /dev/%n\""],
	$["name" : "prio_hds_mod", "id" : `prio_hds_mod, "optstr" : "\"mpath_prio_hds_modular %b\""],
	$["name" : "none", "id" : `none, "optstr" : ""]
]];

term build_prio_callout_term(symbol opt)
{
    term ret = `Empty();
    if (opt == `combobox_only)
	ret = `ComboBox(`id(`prio_callout),
			`opt(`notify), 
			optlabel["prio_callout"]:"NA",
			build_combobox_list(prio_callout_opts));
    else if (opt == `all)
	ret = `ReplacePoint(
		    `id(`replace_prio_callout), 
		    `ComboBox(`id(`prio_callout),
			`opt(`notify), 
			optlabel["prio_callout"]:"NA",
			build_combobox_list(prio_callout_opts)));
    else
	Popup::Message(sformat("build_prio_callout_term: unexpected opt %1", opt));
    return ret;
}

void update_prio_callout_term(map item)
{
    string value = item["prio_callout"]:"";
    if (value == "mpath_prio_emc /dev/%n")
	UI::ChangeWidget(`id(`prio_callout), `Value, `prio_emc);
    else if (value == "mpath_prio_alua /dev/%n")
	UI::ChangeWidget(`id(`prio_callout), `Value, `prio_alua);
    else if (value == "mpath_prio_netapp /dev/%n")
	UI::ChangeWidget(`id(`prio_callout), `Value, `prio_netapp);
    else if (value == "mpath_prio_tpc /dev/%n")
	UI::ChangeWidget(`id(`prio_callout), `Value, `prio_tpc);
    else if (value == "mpath_prio_hp_sw /dev/%n")
	UI::ChangeWidget(`id(`prio_callout), `Value, `prio_hp_sw);
    else if (value == "mpath_prio_hds_modular %b")
	UI::ChangeWidget(`id(`prio_callout), `Value, `prio_hds_mod);
    else if (value == "")
	UI::ChangeWidget(`id(`prio_callout), `Value, `none);
    else
	Popup::Message(sformat("update_prio_callout_term: unexpected value %1", value));
}

map prio_callout_handler(map item)
{
    string value = "";
    any ret = UI::QueryWidget(`id(`prio_callout), `Value);
    if (ret == `prio_emc)
	value = "mpath_prio_emc /dev/%n";
    else if (ret == `prio_alua)
	value = "mpath_prio_alua /dev/%n";
    else if (ret == `prio_netapp)
	value = "mpath_prio_netapp /dev/%n";
    else if (ret == `prio_tpc)
	value = "mpath_prio_tpc /dev/%n";
    else if (ret == `prio_hp_sw)
	value = "mpath_prio_hp_sw /dev/%n";
    else if (ret == `prio_hds_mod)
	value = "mpath_prio_hds_modular %b";
    else if (ret == `none)
	value = "";
    else
	Popup::Message(sformat("prio_callout_handler: unexpected ret %1", ret));
    item["prio_callout"] = value;
    return item;
}

map check_prio_callout(map item)
{
    string header = "* \"prio_callout\" ";
    map ret = $[];
    string value = item["prio_callout"]:"";;

    if (value == "" ||
	value == "mpath_prio_emc /dev/%n" ||
	value == "mpath_prio_alua /dev/%n" ||
	value == "mpath_prio_netapp /dev/%n" ||
	value == "mpath_prio_tpc /dev/%n" ||
	value == "mpath_prio_hp_sw /dev/%n" ||
	value == "mpath_prio_hds_modular %b") {
	ret["result"] = true;
	ret["info"] = "";
    } else {
	ret["result"] = false;
	ret["info"] = header + _("illegal value") + "\n";
    }
    return ret;
}

map features_opts = $["type" : "combobox", "list" : [
	$["name" : "0", "id" : `zero, "optstr" : "0"],
	$["name" : "queue_if_no_path", "id" : `queue_if_no_path, "optstr" : "\"1 queue_if_no_path\""],
	$["name" : "none", "id" : `none, "optstr" : ""]
]];

term build_features_term(symbol opt)
{
    return `ComboBox(`id(`features),
			`opt(`notify), 
			optlabel["features"]:"NA",
			build_combobox_list(features_opts));
}

void update_features_term(map item)
{
    string value = item["features"]:"";

    if (value == "1 queue_if_no_path")
	UI::ChangeWidget(`id(`features), `Value, `queue_if_no_path);
    else if (value == "0")
	UI::ChangeWidget(`id(`features), `Value, `zero);
    else if (value == "")
	UI::ChangeWidget(`id(`features), `Value, `none);
    else
	Popup::Message(sformat("update_features_term: unexpected value %1", value));
}

map features_handler(map item)
{
    string value = "";
    any ret = UI::QueryWidget(`id(`features), `Value);
    if (ret == `queue_if_no_path)
	value = "1 queue_if_no_path";
    else if (ret == `zero)
	value = "0";
    else if (ret == `none)
	value = "";
    else
        Popup::Message(sformat("features_handler: unexpected ret %1", ret));
    item["features"] = value;
    return item;
}

map check_features(map item)
{
    string header = "* \"features\" ";
    map ret = $[];
    string value = item["features"]:"";
    if (value == "" ||
	value == "1 queue_if_no_path" ||
	value == "0") 
    {
	ret["result"] = true;
	ret["info"] = "";
    } else {
	ret["result"] = false;
	ret["info"] = header + _("illegal value") + "\n";
    }
    return ret;
}

map path_checker_opts = $["type" : "combobox", "list" : [
	$["name" : "readsector0", "id" : `readsector0, "optstr" : "readsector0"],
	$["name" : "tur", "id" : `tur, "optstr" : "tur"],
	$["name" : "emc_clariion", "id" : `emc_clariion, "optstr" : "emc_clariion"],
	$["name" : "hp_sw", "id" : `hp_sw, "optstr" : "hp_sw"],
	$["name" : "rdac", "id" : `rdac, "optstr" : "rdac"],
	$["name" : "directio", "id" : `directio, "optstr" : "directio"],
	$["name" : "none", "id" : `none, "optstr" : ""]
]];

term build_path_checker_term(symbol opt)
{
    term ret = `Empty();
    if (opt == `combobox_only)
	ret = `ComboBox(`id(`path_checker),
			`opt(`notify), 
			optlabel["path_checker"]:"NA",
			build_combobox_list(path_checker_opts));
    else if (opt == `all)
	ret = `ReplacePoint(
		    `id(`replace_path_checker),
		    `ComboBox(`id(`path_checker),
			`opt(`notify), 
			optlabel["path_checker"]:"NA",
			build_combobox_list(path_checker_opts)));
    else
	Popup::Message(sformat("build_path_checker_term: unexpected opt %1", opt));
    return ret;
}

void update_path_checker_term(map item)
{
    string value = item["path_checker"]:"";
    if (value == "readsector0")
	UI::ChangeWidget(`id(`path_checker), `Value, `readsector0);
    else if (value == "tur")
	UI::ChangeWidget(`id(`path_checker), `Value, `tur);
    else if (value == "emc_clariion")
	UI::ChangeWidget(`id(`path_checker), `Value, `emc_clariion);
    else if (value == "hp_sw")
	UI::ChangeWidget(`id(`path_checker), `Value, `hp_sw);
    else if (value == "rdac")
	UI::ChangeWidget(`id(`path_checker), `Value, `rdac);
    else if (value == "directio")
	UI::ChangeWidget(`id(`path_checker), `Value, `directio);
    else if (value == "")
	UI::ChangeWidget(`id(`path_checker), `Value, `none);
    else
	Popup::Message(sformat("update_path_checker_term: unexpected value %1", value));
}

map path_checker_handler(map item)
{
    string value = "";
    any ret = UI::QueryWidget(`id(`path_checker), `Value);
    if (ret == `none)
	value = "";
    else if (ret == `readsector0)
	value = "readsector0";
    else if (ret == `tur)
	value = "tur";
    else if (ret == `emc_clariion)
	value = "emc_clariion";
    else if (ret == `hp_sw)
	value = "hp_sw";
    else if (ret == `rdac)
	value = "rdac";
    else if (ret == `directio)
	value = "directio";
    else
	Popup::Message(sformat("path_checker_handler: unexpected ret %1", ret));
    item["path_checker"] = value;
    return item;
}

map check_path_checker(map item)
{
    map ret = $[];
    string value = item["path_checker"]:"";
    if (value == "" ||
		value == "readsector0" ||
		value == "tur" ||
		value == "emc_clariion" ||
		value == "hp_sw" ||
		value == "rdac" ||
		value == "directio" ) {
	ret["result"] = true;
	ret["info"] = "";
    } else {
	ret["result"] = false;
	ret["info"] = "* \"path_checker\" " + _("illegal value") + "\n";
    }
    return ret;
}

map failback_opts = $["type" : "combobox", "list" : [
	$["name" : "manual", "id" : `manual, "optstr" : "manual"],
	$["name" : "immediate", "id" : `immediate, "optstr" : "immediate"],
	$["name" : "customized_str", "id" : `customized_str, "optstr" : "\(number > 0\)"]
]];

term build_failback_term(symbol opt)
{
    term ret = `Empty();
    if (opt == `editable_combobox_only)
	ret = `ComboBox(`id(`failback),
			`opt(`notify, `editable),
			optlabel["failback"]:"NA",
			build_combobox_list(failback_opts));
    else if (opt == `combobox_only)
	ret = `ComboBox(`id(`failback),
			`opt(`notify),
			optlabel["failback"]:"NA",
			build_combobox_list(failback_opts));
    else if (opt == `all)
	ret = `ReplacePoint(`id(`replace_failback),
		    `ComboBox(`id(`failback),
			`opt(`notify),
			optlabel["failback"]:"NA",
			build_combobox_list(failback_opts)));
    else
	Popup::Message(sformat("build_failback_term: unexpected opt %1", opt));

    return ret;
}

void update_failback_term(map item)
{
    string value = item["failback"]:"";
    if (value == "manual")
	UI::ChangeWidget(`id(`failback), `Value, `manual);
    else if (value == "immediate")
	UI::ChangeWidget(`id(`failback), `Value, `immediate);
    else
    {
	UI::ReplaceWidget(`id(`replace_failback),
				build_failback_term(`editable_combobox_only));
	UI::ChangeWidget(`id(`failback),
				`ValidChars, build_valid_chars("number"));
	UI::ChangeWidget(`id(`failback),
				`Value, value);
	temp_string_values["failback"] = value;
    }
}

map failback_handler(map item)
{
    string value = "";
    any ret = UI::QueryWidget(`id(`failback), `Value);
    if (ret == `immediate)
    {
	UI::ReplaceWidget(`id(`replace_failback),
			build_failback_term(`combobox_only));
	UI::ChangeWidget(`id(`failback), `Value, `immediate);
	value = "immediate";
    } else if (ret == `manual) {
	UI::ReplaceWidget(`id(`replace_failback),
			build_failback_term(`combobox_only));
	UI::ChangeWidget(`id(`failback), `Value, `manual);
	value = "manual";
    } else if (ret == `customized_str) {
	value = temp_string_values["failback"]:"";
	UI::ReplaceWidget(`id(`replace_failback), build_failback_term(`editable_combobox_only));
	UI::ChangeWidget(`id(`failback), `ValidChars, build_valid_chars("number"));
	UI::ChangeWidget(`id(`failback), `Value, value);
	UI::SetFocus(`id(`failback));
	replacewidget_notify = true;
    } else if (ret == "0") {
	value = "";
	UI::ReplaceWidget(`id(`replace_failback), build_failback_term(`editable_combobox_only));
	UI::ChangeWidget(`id(`failback), `ValidChars, build_valid_chars("number"));
	UI::SetFocus(`id(`failback));
	UI::ChangeWidget(`id(`failback), `Value, " ");
	replacewidget_notify = true;
    } else if (ret == "") {
	value = "";
    } else if (tointeger(ret) != nil) {
	value = (string)ret;
	temp_string_values["failback"] = value;
    } else {
	Popup::Message(sformat("failback_handler: unexpected ret %1", ret));
    }
    item["failback"] = value;
    return item;
}

map check_failback(map item)
{
    map ret = $[];
    string value = item["failback"]:"";
    if (value == "" ||
	value == "immediate" ||
	value == "manual")
    {
	ret["result"] = true;
	ret["info"] = "";
    } else if (substring(value, 0, 1) == "0") {
	ret["result"] = false;
	ret["info"] = "* \"failback\" " + _("should be a decimal integer") + "\n";
    } else if ( tointeger(value) == nil ||
		value != tostring(tointeger(value)) ||
		value == "0" ) {
	ret["result"] = false;
	ret["info"] = "* \"failback\" " + _("illegal value") + "\n";
    } else if (tointeger(value) <= 0) {
	ret["result"] = false;
	ret["info"] = "* \"failback\" " + _("should be greater than 0") + "\n";
    } else if (value == tostring(tointeger(value))) {
	ret["result"] = true;
	ret["info"] = "";
    } else {
	ret["result"] = false;
	ret["info"] = "* \"failback\" " + _("illegal value") + "\n";
    }
    return ret;
}

map rr_min_io_opts = $["type" : "textentry", "entry" : 
	$["name" : optlabel["rr_min_io"]:"NA", "id" : `rr_min_io]
];

term build_rr_min_io_term(symbol opt)
{
    map entry = rr_min_io_opts["entry"]:$[];
    term ret = `Empty();
    if (entry != $[])
    {
	symbol id = entry["id"]:`id;
	string label_str = entry["name"]:"NA";
	ret = `TextEntry(`id(id), `opt(`notify), label_str, "");
    } else {
	Popup::Message("rr_min_io_opts[\"entry\"] is not defined");
    }
    return ret;
} 

void update_rr_min_io_term(map item)
{
    string value = item["rr_min_io"]:"";
    UI::ChangeWidget(`id(`rr_min_io), `ValidChars, build_valid_chars("number"));
    UI::ChangeWidget(`id(`rr_min_io), `Value, value);
}

map rr_min_io_handler(map item)
{
    string value = "";
    any ret = UI::QueryWidget(`id(`rr_min_io), `Value);
    if (tointeger(ret) != nil)
	value = (string)ret;
    item["rr_min_io"] = value;
    return item;
}

map check_rr_min_io(map item)
{
    map ret = $[];
    string value = item["rr_min_io"]:"";
    if (value != "0" && substring(value, 0, 1) == "0") {
	ret["result"] = false;
	ret["info"] = "* \"rr_min_io\" " + _("should be a decimal integer") + "\n";
    } else if (value == "") {
	ret["result"] = true;
	ret["info"] = "";
    } else if (tointeger(value) == nil ||
		value != tostring(tointeger(value))) {
	ret["result"] = false;
	ret["info"] = "* \"rr_min_io\" " + _("invalid decimal integer") + "\n";
    } else if (value == tostring(tointeger(value))) {
	ret["result"] = true;
	ret["info"] = "";
    } else {
	ret["result"] = false;
	ret["info"] = "* \"rr_min_io\" " + _("illegal value") + "\n";
    }
    return ret;
}

map rr_weight_opts = $["type" : "combobox", "list" : [
	$["name" : "priorities", "id" : `priorities, "optstr" : "priorities"],
	$["name" : "uniform", "id" : `uniform, "optstr" : "uniform"],
	$["name" : "none", "id" : `none, "optstr" : ""]
]];

term build_rr_weight_term(symbol opt)
{
    return `ComboBox(`id(`rr_weight),
			`opt(`notify), 
			optlabel["rr_weight"]:"NA",
			build_combobox_list(rr_weight_opts));
}

void update_rr_weight_term(map item)
{
    string value = item["rr_weight"]:"";
    if (value == "priorities")
	UI::ChangeWidget(`id(`rr_weight), `Value, `priorities);
    else if (value == "uniform")
	UI::ChangeWidget(`id(`rr_weight), `Value, `uniform);
    else if (value == "")
	UI::ChangeWidget(`id(`rr_weight), `Value, `none);
    else
	Popup::Message(sformat("update_rr_weight_term: unexpected value %1", value));
}

map rr_weight_handler(map item)
{
    string value = "";
    any ret = UI::QueryWidget(`id(`rr_weight), `Value);
    if (ret == `priorities)
	value = "priorities";
    else if (ret == `uniform)
	value = "uniform";
    else if (ret == `none)
	value = "";
    else
	Popup::Message(sformat("rr_weight_handler: unexpected ret %1", ret));
    item["rr_weight"] = value;
    return item;
}

map check_rr_weight(map item)
{
    string header = "* \"rr_weight\" ";
    map ret = $[];
    string value = item["rr_weight"]:"";
    if (value == "" ||
		value == "priorities" ||
		value == "uniform") {
	ret["result"] = true;
	ret["info"] = "";
    } else {
	ret["result"] = false;
	ret["info"] = header + _("illegal value") + "\n";
    }
    return ret;
}

map no_path_retry_opts = $["type" : "combobox", "list" : [
	$["name" : "fail", "id" : `fail, "optstr" : "fail"],
	$["name" : "queue", "id" : `queue, "optstr" : "queue"],
	$["name" : "customized_str", "id" : `customized_str, "optstr" : "\(number >= 0\)"]
]];

term build_no_path_retry_term(symbol opt)
{
    term ret = `Empty();
    if (opt == `combobox_only)
	ret = `ComboBox(`id(`no_path_retry),
			`opt(`notify), 
			optlabel["no_path_retry"]:"NA",
			build_combobox_list(no_path_retry_opts));
    else if (opt == `editable_combobox_only)
	ret = `ComboBox(`id(`no_path_retry),
			`opt(`notify, `editable), 
			optlabel["no_path_retry"]:"NA", 
			build_combobox_list(no_path_retry_opts));
    else if (opt == `all)
	ret = `ReplacePoint(`id(`replace_no_path_retry),
		    `ComboBox(`id(`no_path_retry),
			`opt(`notify), 
			optlabel["no_path_retry"]:"NA",
			build_combobox_list(no_path_retry_opts)));
    else
	Popup::Message(sformat("build_no_path_retry_term: unexpected opt %1", opt));
    return ret;
}

void update_no_path_retry_term(map item)
{
    string value = item["no_path_retry"]:"";
    if (value == "fail") 
	UI::ChangeWidget(`id(`no_path_retry), `Value, `fail);
    else if (value == "queue")
	UI::ChangeWidget(`id(`no_path_retry), `Value, `queue);
    else {
	UI::ReplaceWidget(`id(`replace_no_path_retry), 
				build_no_path_retry_term(`editable_combobox_only));
	UI::ChangeWidget(`id(`no_path_retry), `ValidChars, 
				build_valid_chars("number"));
	UI::ChangeWidget(`id(`no_path_retry), `Value, value);
	temp_string_values["no_path_retry"] = value;
    }
}

map no_path_retry_handler(map item)
{
    string value = "";
    any ret = UI::QueryWidget(`id(`no_path_retry), `Value);
    if (ret == `fail) {
	UI::ReplaceWidget(`id(`replace_no_path_retry), 
				build_no_path_retry_term(`combobox_only));
	UI::ChangeWidget(`id(`no_path_retry), `Value, `fail);
	value = "fail";
    } else if (ret == `queue) {
	UI::ReplaceWidget(`id(`replace_no_path_retry), 
				build_no_path_retry_term(`combobox_only));
	UI::ChangeWidget(`id(`no_path_retry), `Value, `queue);
	value = "queue";
    } else if (ret == `customized_str) {
	value = temp_string_values["no_path_retry"]:"";
	UI::ReplaceWidget(`id(`replace_no_path_retry), 
				build_no_path_retry_term(`editable_combobox_only));
	UI::ChangeWidget(`id(`no_path_retry), `ValidChars, build_valid_chars("number"));
	UI::ChangeWidget(`id(`no_path_retry), `Value, value);
	UI::SetFocus(`id(`no_path_retry));
	replacewidget_notify = true;
    } else if (ret == "") {
	UI::ReplaceWidget(`id(`replace_no_path_retry), 
				build_no_path_retry_term(`editable_combobox_only));
	UI::ChangeWidget(`id(`no_path_retry), `ValidChars, build_valid_chars("number"));
	UI::SetFocus(`id(`no_path_retry));
	UI::ChangeWidget(`id(`no_path_retry), `Value, "");
	value = "";
	temp_string_values["no_path_retry"] = value;
	replacewidget_notify = true;
    } else if (tointeger(ret) != nil) {
	value = (string)ret;
	temp_string_values["no_path_retry"] = value;
    } else {
	Popup::Message(sformat("no_path_retry_handler: unexpected ret %1", ret));
    }
    item["no_path_retry"] = value;
    return item;
}

map check_no_path_retry(map item)
{
    map ret = $[];
    string value = item["no_path_retry"]:"";
    if (value == "" ||
	value == "fail" ||
	value == "queue")
    {
	ret["result"] = true;
	ret["info"] = "";
    } else if (value != "0" && substring(value, 0, 1) == "0") {
	ret["result"] = false;
	ret["info"] = "* \"no_path_retry\" " + _("should be a decimal integer") + "\n";
    } else if ( tointeger(value) == nil ||
		value != tostring(tointeger(value))) {
	ret["result"] = false;
	ret["info"] = "* \"no_path_retry\" " + _("illegal value") + "\n";
    } else if (value == tostring(tointeger(value))) {
	ret["result"] = true;
	ret["info"] = "";
    } else {
	ret["result"] = false;
	ret["info"] = "* \"no_path_retry\" " + _("illegal value") + "\n";
    }
    return ret;
}

map user_friendly_names_opts = $["type" : "combobox", "list" : [
	$["name" : "yes", "id" : `yes, "optstr" : "yes"],
	$["name" : "no", "id" : `no, "optstr" : "no"],
	$["name" : "none", "id" : `none, "optstr" : ""]
]];

term build_user_friendly_names_term(symbol opt)
{
    return `ComboBox(`id(`user_friendly_names),
			`opt(`notify), 
			optlabel["user_friendly_names"]:"NA",
			build_combobox_list(user_friendly_names_opts));
}

void update_user_friendly_names_term(map item)
{
    string value = item["user_friendly_names"]:"";
    if(value == "yes")
	UI::ChangeWidget(`id(`user_friendly_names), `Value, `yes);
    else if (value == "no")
	UI::ChangeWidget(`id(`user_friendly_names), `Value, `no);
    else if (value == "")
	UI::ChangeWidget(`id(`user_friendly_names), `Value, `none);
    else
	Popup::Message(sformat("update_user_friendly_names_term: unexpected value %1", value));
}

map user_friendly_names_handler(map item)
{
    string value = "";
    any ret = UI::QueryWidget(`id(`user_friendly_names), `Value);
    if(ret == `yes)
	value = "yes";
    else if (ret == `no)
	value = "no";
    else if (ret == `none)
	value = "";
    else
	Popup::Message(sformat("user_friendly_names_handler: unexpected ret %1", ret));
    item["user_friendly_names"] = value;
    return item;
}

map check_user_friendly_names(map item)
{
    string header = "* \"user_friendly_names\" ";
    map ret = $[];
    string value = item["user_friendly_names"]:"";
    if (value == "" ||
		value == "yes" ||
		value == "no") {
	ret["result"] = true;
	ret["info"] = "";
    } else {
	ret["result"] = false;
	ret["info"] = header + _("illegal value") + "\n";
    }
    return ret;
}

map wwid_opts = $["type" : "textentry", "entry" : 
	$["name" : optlabel["wwid"]:"NA", "id" : `wwid]
];

term build_wwid_term(symbol opt)
{
    map entry = wwid_opts["entry"]:$[];
    term ret = `Empty();
    if (entry != $[])
    {
	symbol id = entry["id"]:`id;
	string label_str = entry["name"]:"NA";
	ret = `TextEntry(`id(id), `opt(`notify), label_str, "");
    } else {
	Popup::Message("wwid_opt[\"entry\"] is not defined");
    }
    return ret;
}

void update_wwid_term(map item)
{
    string value = item["wwid"]:"";
    UI::ChangeWidget(`id(`wwid), `ValidChars, build_valid_chars("wwid"));
    UI::ChangeWidget(`id(`wwid), `Value, value);
}

map wwid_handler(map item)
{
    string value = "";
    any ret = UI::QueryWidget(`id(`wwid), `Value);
    if (is(ret, string) == true)
	value = (string) ret;
    else
	Popup::Message(sformat("wwid_handler: unexpected ret %1", ret));
    item["wwid"] = value;
    return item;
}

map check_wwid(map item)
{
    map ret = $[];
    string value = item["wwid"]:"";
    if (value == "" ||
		regexpmatch(value, "^[ \t]+$")) {
	ret["result"] = false;
	ret["info"] = "* \"wwid\" " + _("should not be empty") + "\n";
    } else {
	ret["result"] = true;
	ret["info"] = "";
    }
    return ret;
}

map devnode_opts = $["type" : "textentry", "entry" :
	$["name" : optlabel["devnode"]:"NA", "id" : `devnode]
];

term build_devnode_term(symbol opt)
{
    map entry = devnode_opts["entry"]:$[];
    term ret = `Empty();
    if (entry != $[])
    {
	symbol id = entry["id"]:`id;
	string label_str = entry["name"]:"NA";
	ret = `TextEntry(`id(id), `opt(`notify), label_str, "");
    } else {
	Popup::Message("devnode_opts[\"entry\"] is not defined");
    }
    return ret;
}

void update_devnode_term(map item)
{
    string value = item["devnode"]:"";
    UI::ChangeWidget(`id(`devnode), `ValidChars, build_valid_chars("devnode"));
    UI::ChangeWidget(`id(`devnode), `Value, value);
}

map devnode_handler(map item)
{
    string value = "";
    any ret = UI::QueryWidget(`id(`devnode), `Value);
    if (is(ret, string) == true)
        value = (string) ret;
    else
        Popup::Message(sformat("devnode_handler: unexpected ret %1", ret));
    item["devnode"] = value;
    return item;
}

map check_devnode(map item)
{
    string header = "* \"devnode\" ";
    map ret = $[];
    string value = item["devnode"]:"";
    if (value == "" ||
		regexpmatch(value, "^[ \t]+$")) {
        ret["result"] = false;
        ret["info"] = header + _("should not be empty") + "\n";
    } else {
        ret["result"] = true;
        ret["info"] = "";
    }
    return ret;
}

map alias_opts = $["type" : "textentry", "entry" :
	$["name" : optlabel["alias"]:"NA", "id" : `alias]
];

term build_alias_term(symbol opt)
{
    map entry = alias_opts["entry"]:$[];
    term ret = `Empty();
    if(entry != $[])
    {
	symbol id = entry["id"]:`id;
	string label_str = entry["name"]:"NA";
	ret = `TextEntry(`id(id), `opt(`notify),  label_str, "");
    } else {
	Popup::Message("alias_opts[\"entry\"] is not defined");
    }
    return ret;
}

void update_alias_term(map item)
{
    string value = item["alias"]:"";
    UI::ChangeWidget(`id(`alias), `ValidChars, build_valid_chars("alias"));
    UI::ChangeWidget(`id(`alias), `Value, value);
}

map alias_handler(map item)
{
    string value = "";
    any ret = UI::QueryWidget(`id(`alias), `Value);
    if (is(ret, string) == true)
	value = (string) ret;
    else
	Popup::Message(sformat("alias_handler: unexpected ret %1", ret));
    item["alias"] = value;
    return item;
}

map check_alias(map item)
{
    map ret = $[];
    string value = item["alias"]:"";
    if (value == toascii(value)) {
	ret["result"] = true;
	ret["info"] = "";
    } else {
	ret["result"] = false;
	ret["info"] = "* \"alias\" " + _("illegal value") + "\n";
    }
    return ret;
}

map vendor_opts = $["type" : "textentry", "entry" :
	$["name" : optlabel["vendor"]:"NA", "id" : `vendor]
]; 

term build_vendor_term(symbol opt)
{
    map entry = vendor_opts["entry"]:$[];
    term ret = `Empty();
    if(entry != $[])
    {
	symbol id = entry["id"]:`id;
	string label_str = entry["name"]:"NA";
	ret = `TextEntry(`id(id), `opt(`notify), label_str, "");
    } else {
	Popup::Message("vendor_opts[\"entry\"] is not defined");
    }
    return ret;
}

void update_vendor_term(map item)
{
    string value = item["vendor"]:"";
    UI::ChangeWidget(`id(`vendor), `ValidChars, build_valid_chars("vendor"));
    UI::ChangeWidget(`id(`vendor), `Value, value);
}

map vendor_handler(map item)
{
    string value = "";
    any ret = UI::QueryWidget(`id(`vendor), `Value);
    if (is(ret, string) == true)
        value = (string) ret;
    else
        Popup::Message(sformat("vendor_handler: unexpected ret %1", ret));
    item["vendor"] = value;
    return item;
}

map check_vendor(map item)
{
    string header = "* \"vendor\" ";
    map ret = $[];
    string value = item["vendor"]:"";
    if (value == "" ||
                regexpmatch(value, "^[ \t]+$")) {
        ret["result"] = false;
        ret["info"] = header + _("should not be empty") + "\n";
    } else {
        ret["result"] = true;
        ret["info"] = "";
    }
    return ret;
}

map product_opts = $["type" : "textentry", "entry" :
	$["name" : optlabel["product"]:"NA", "id" : `product]
]; 

term build_product_term(symbol opt)
{
    map entry = product_opts["entry"]:$[];
    term ret = `Empty();
    if(entry != $[])
    {
	symbol id = entry["id"]:`id;
	string label_str = entry["name"]:"NA";
	ret = `TextEntry(`id(id), `opt(`notify), label_str, "");
    } else {
	Popup::Message("product_opts[\"entry\"] is not defined");
    }
    return ret;
}

void update_product_term(map item)
{
    string value = item["product"]:"";
    UI::ChangeWidget(`id(`product), `ValidChars, build_valid_chars("product"));
    UI::ChangeWidget(`id(`product), `Value, value);
    return;
}

map product_handler(map item)
{
    string value = "";
    any ret = UI::QueryWidget(`id(`product), `Value);
    if (is(ret, string) == true)
        value = (string) ret;
    else
        Popup::Message(sformat("product_handler: unexpected ret %1", ret));
    item["product"] = value;
    return item;
}

map check_product(map item)
{
    string header = "* \"product\" ";
    map ret = $[];
    string value = item["product"]:"";
    if (value == "" ||
                regexpmatch(value, "^[ \t]+$")) {
        ret["result"] = false;
        ret["info"] = header + _("should not be empty") + "\n";
    } else {
        ret["result"] = true;
        ret["info"] = "";
    }
    return ret;
}

map product_blacklist_opts = $["type" : "textentry", "entry" :
	$["name" : optlabel["product_blacklist"]:"NA", "id" : `product_blacklist]
]; 

term build_product_blacklist_term(symbol opt)
{
    map entry = product_blacklist_opts["entry"]:$[];
    term ret = `Empty();
    if(entry != $[])
    {
	symbol id = entry["id"]:`id;
	string label_str = entry["name"]:"NA";
	ret = `TextEntry(`id(id), `opt(`notify), label_str, "");
    } else {
	Popup::Message("product_blacklist_opts[\"entry\"] is not defined");
    }
    return ret;
}

void update_product_blacklist_term(map item)
{
    string value = item["product_blacklist"]:"";
    UI::ChangeWidget(`id(`product_blacklist), `ValidChars, build_valid_chars("product_blacklist"));
    UI::ChangeWidget(`id(`product_blacklist), `Value, value);
}

map product_blacklist_handler(map item)
{
    string value = "";
    any ret = UI::QueryWidget(`id(`product_blacklist), `Value);
    if (is(ret, string) == true)
        value = (string) ret;
    else
        Popup::Message(sformat("product_blacklist_handler: unexpected ret %1", ret));
    item["product_blacklist"] = value;
    return item;
}

map check_product_blacklist(map item)
{
    string header = "* \"product_blacklist\" ";
    map ret = $[];
    string value = item["product_blacklist"]:"";
    if (value != toascii(value))
    {
        ret["result"] = false;
        ret["info"] = header + _("illegal value") + "\n";
    } else {
        ret["result"] = true;
        ret["info"] = "";
    }
    return ret;
}

map hardware_handler_opts = $["type" : "textentry", "entry" :
        $["name" : optlabel["hardware_handler"]:"NA", "id" : `hardware_handler]
];

term build_hardware_handler_term(symbol opt)
{
    map entry = hardware_handler_opts["entry"]:$[];
    term ret = `Empty();
    if (entry != $[])
    {
        symbol id = entry["id"]:`id;
        string label_str = entry["name"]:"NA";
        ret = `TextEntry(`id(id), `opt(`notify), label_str, "");
    } else {
        Popup::Message("hardware_opt[\"entry\"] is not defined");
    }
    return ret;
}

void update_hardware_handler_term(map item)
{
    string value = item["hardware_handler"]:"";
    UI::ChangeWidget(`id(`hardware_handler), `ValidChars, build_valid_chars("hardware_handler"));
    UI::ChangeWidget(`id(`hardware_handler), `Value, value);
}

map hardware_handler_handler(map item)
{
    string value = "";
    any ret = UI::QueryWidget(`id(`hardware_handler), `Value);
    if (is(ret, string) == true)
        value = (string) ret;
    else
        Popup::Message(sformat("hardware_handler_handler: unexpected ret %1", ret));
    item["hardware_handler"] = value;
    return item;
}

map check_hardware_handler(map item)
{
    string header = "* \"hardware_handler\" ";
    map ret = $[];
    string value = item["hardware_handler"]:"";


    if (value == "" ||
	value == toascii(value))
    {
        ret["result"] = true;
        ret["info"] = "";
    } else {
        ret["result"] = false;
        ret["info"] = header + _("illegal value") + "\n";
    }
    return ret;
}

map build_term_handlers = $[
	`polling_interval	: build_polling_interval_term,
	`udev_dir		: build_udev_dir_term,
	`selector		: build_selector_term,
	`path_selector		: build_path_selector_term,
	`path_grouping_policy	: build_path_gp_term,
	`getuid_callout		: build_getuid_callout_term,
	`prio_callout		: build_prio_callout_term,
	`features		: build_features_term,
	`path_checker		: build_path_checker_term,
	`failback		: build_failback_term,
	`rr_min_io		: build_rr_min_io_term,
	`rr_weight		: build_rr_weight_term,
	`no_path_retry		: build_no_path_retry_term,
	`user_friendly_names	: build_user_friendly_names_term,
	`wwid			: build_wwid_term,
	`devnode		: build_devnode_term,
	`alias			: build_alias_term,
	`vendor			: build_vendor_term,
	`product		: build_product_term,
	`product_blacklist	: build_product_blacklist_term,
	`hardware_handler	: build_hardware_handler_term
    ];

map update_term_handlers = $[
	`polling_interval	: update_polling_interval_term,
	`udev_dir		: update_udev_dir_term,
	`selector		: update_selector_term,
	`path_selector		: update_path_selector_term,
	`path_grouping_policy	: update_path_gp_term,
	`getuid_callout		: update_getuid_callout_term,
	`prio_callout		: update_prio_callout_term,
	`features		: update_features_term,
	`path_checker		: update_path_checker_term,
	`failback		: update_failback_term,
	`rr_min_io		: update_rr_min_io_term,
	`rr_weight		: update_rr_weight_term,
	`no_path_retry		: update_no_path_retry_term,
	`user_friendly_names	: update_user_friendly_names_term,
	`wwid			: update_wwid_term,
	`devnode		: update_devnode_term,
	`alias			: update_alias_term,
	`vendor			: update_vendor_term,
	`product		: update_product_term,
	`product_blacklist	: update_product_blacklist_term,
	`hardware_handler	: update_hardware_handler_term
    ];

map default_item_handlers = $[
	`polling_interval	: polling_interval_handler,
	`udev_dir		: udev_dir_handler,
	`selector		: selector_handler,
	`path_selector		: path_selector_handler,
	`path_grouping_policy	: path_gp_handler,
	`getuid_callout		: getuid_callout_handler,
	`prio_callout		: prio_callout_handler,
	`features		: features_handler,
	`path_checker		: path_checker_handler,
	`failback		: failback_handler,
	`rr_min_io		: rr_min_io_handler,
	`rr_weight		: rr_weight_handler,
	`no_path_retry		: no_path_retry_handler,
	`user_friendly_names	: user_friendly_names_handler,
	`wwid			: wwid_handler,
	`devnode		: devnode_handler,
	`alias			: alias_handler,
	`vendor			: vendor_handler,
	`product		: product_handler,
	`product_blacklist	: product_blacklist_handler,
	`hardware_handler	: hardware_handler_handler
    ];

map check_handlers = $[
	`polling_interval	: check_polling_interval,
	`udev_dir		: check_udev_dir,
	`selector		: check_selector,
	`path_selector		: check_path_selector,
	`path_grouping_policy	: check_path_gp,
	`getuid_callout		: check_getuid_callout,
	`prio_callout		: check_prio_callout,
	`features		: check_features,
	`path_checker		: check_path_checker,
	`failback		: check_failback,
	`rr_min_io		: check_rr_min_io,
	`rr_weight		: check_rr_weight,
	`no_path_retry		: check_no_path_retry,
	`user_friendly_names	: check_user_friendly_names,
	`wwid			: check_wwid,
	`devnode		: check_devnode,
	`alias			: check_alias,
	`vendor			: check_vendor,
	`product		: check_product,
	`product_blacklist	: check_product_blacklist,
	`hardware_handler	: check_hardware_handler
    ];


list<symbol> multipath_detail_items = [
	`path_grouping_policy, 
	`path_checker, 
	`path_selector, 
	`failback, 
	`no_path_retry, 
	`rr_min_io
    ];

list<symbol> multipath_brief_items = [
	`wwid,
	`alias
    ];


list<symbol> defaults_section_items = [
	`polling_interval,
	`udev_dir,
	`selector,
	`path_grouping_policy,
	`getuid_callout,
	`prio_callout,
	`features,
	`path_checker,
	`failback,
	`rr_min_io,
	`rr_weight,
	`no_path_retry,
	`user_friendly_names
    ];

list<symbol> device_detail_items = [
	`hardware_handler,
	`path_grouping_policy,
	`getuid_callout,
	`path_selector,
	`path_checker,
	`features,
	`prio_callout,
	`failback,
	`rr_weight,
	`no_path_retry,
	`rr_min_io
    ];

list<symbol> device_brief_items = [
	`vendor,
	`product,
	`product_blacklist
    ];

list<symbol> blacklist_section_items = [
	`wwid,
	`devnode,
	`vendor,
	`product
    ];

}
