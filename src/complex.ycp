/* ------------------------------------------------------------------------------
 * Copyright (c) 2006 Novell, Inc. All Rights Reserved.
 *
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of version 2 of the GNU General Public License as published by the
 * Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail, you may find
 * current contact information at www.novell.com.
 * ------------------------------------------------------------------------------
 */

/**
 * File:	modules/complex.ycp
 * Package:	Configuration of multipath
 * Summary:	Complex stuffs for multipath yast module
 * Authors:	Coly Li <coyli@novell.com>
 *
 * $Id: complex.ycp,v 1.49 2007/01/22 03:25:16 coly Exp $
 *
 * Compelx stuffs for multipath yast module, this file is included
 * by Multipath.ycp.
 */

{

textdomain "multipath";

import "Service";
import "Storage";

integer service_status = 0;
boolean has_dumbtab = false;
const string device_template = "vendor %1; product %2";
const string builtin_multipath_conf_path = "/tmp/.yast2-multipath-builtin-conf";

include "multipath/options.ycp";

/* Multipath summary dialog caption */
string caption = _("Multipath Configuration");



term start_stop_check = `RadioButtonGroup(
			    `id(`start_stop_radiobutton),
				`Left (
				    `HVSquash(
					`VBox(
					    `Left(`RadioButton(`id(`stop_multipath), `opt(`notify), _("Do &not use Multipath"), false)),
					    `Left(`RadioButton(`id(`start_multipath), `opt(`notify), _("&Use Multipath"), false))
			))));


list <map> blacklist_items = [];

/*
   build black list table from blacklist_items
*/
list<term> Build_BlacklistTable() {
    integer id = 0;
    list<term> table_items = maplist(map e, blacklist_items, {
			id = id + 1;
			if(e["type"]:"" == "device") {
			    map sub_e = e["value"]:$[];
			    if(sub_e != $[]) {
				string product_str = sub_e["product"]:"NA";
				string vendor_str = sub_e["vendor"]:"NA";
				string value = sformat(device_template, vendor_str, product_str);
				return `item(`id(id), e["name"]:"NA", value);
			    }
			} else if(e["type"]:"" == "node"){
			    return `item(`id(id), e["name"]:"NA", e["value"]:"NA");
			}
		});
    return table_items;
}

term blacklist_config = `VBox(
			    `id(`blacklist_config_id),
			    `Frame( _("Blacklist"),
				`VBox(
				    `Table(
					`id(`blacklist_table_id), `opt(`notify),
					`header( _("Item"), _("Value")),
					Build_BlacklistTable()
				    ),
				    `Left(`HBox(
					`PushButton(`id(`blacklist_add_id), Label::AddButton()),
					`PushButton(`id(`blacklist_edit_id), Label::EditButton()),
					`PushButton(`id(`blacklist_del_id), Label::DeleteButton())
				    ))
			)));


list <map> blacklist_exception_items = [];

/*
   build black list exception table from blacklist_exception_items
*/
list<term> Build_BlacklistException_Table() {
    integer id = 0;
    list<term> table_items = maplist(map e, blacklist_exception_items, {
			id = id + 1;
			if(e["type"]:"" == "device") {
			    map sub_e = e["value"]:$[];
			    if(sub_e != $[]) {
				string product_str = sub_e["product"]:"NA";
				string vendor_str = sub_e["vendor"]:"NA";
				string value = sformat(device_template, vendor_str, product_str);
				return `item(`id(id), e["name"]:"NA", value);
			    }
			} else if(e["type"]:"" == "node"){
			    return `item(`id(id), e["name"]:"NA", e["value"]:"NA");
			}
		});
    return table_items;
}

term blacklist_exception_config = `VBox(
			    `id(`blacklist_config_id),
			    `Frame( _("Blacklist Exceptions"),
				`VBox(
				    `Table(
					`id(`blacklist_table_id), `opt(`notify),
					`header( _("Item"), _("Value")),
					Build_BlacklistException_Table()
				    ),
				    `Left(`HBox(
					`PushButton(`id(`blacklist_add_id), Label::AddButton()),
					`PushButton(`id(`blacklist_edit_id), Label::EditButton()),
					`PushButton(`id(`blacklist_del_id), Label::DeleteButton())
				    ))
			)));


/* will be initiated in Read_Defaults.. */
map<string, string> defaults_items = $[];

/*
   build defaults table from defaults_items
*/
list<term> Build_DefaultsTable() {
    list <term> table_items = [];
    foreach(string k, string v, defaults_items, {
		if (k == "NA") return;
		symbol id = symbolof(toterm(k));
		table_items = add(table_items, `item(`id(id), k, v));
	});
    return table_items;
}

term defaults_config = `VBox(
			    `id(`defaults_config_id),
			    `Frame( _("Defaults"),
				`VBox(
				    `Table(
					`id(`defaults_table_id), `opt(`notify),
					`header( _("Item"), _("Value")),
					Build_DefaultsTable()
				    ),
				    `Left(`HBox(
					`PushButton(`id(`defaults_edit_id), Label::EditButton()),
					`PushButton(`id(`defaults_del_id), Label::DeleteButton())
				    ))
			)));

list <map> devices_items = [];

/*
    build devices table from devices_items
*/
list<term> Build_DevicesTable() {
    integer i = 0;
    list<term> table_items = maplist(map e, devices_items, {
				term item  = `item(`id(i), e["vendor"]:"NA", e["product"]:"NA");
				i = i + 1;
				return item;
    });
    return table_items;
}

term devices_config = `VBox(
			    `id(`devices_config_id),
			    `Frame( _("Devices"),
				`VBox(
				    `Table(
					`id(`devices_table_id), `opt(`notify),
					`header( _("vendor"), _("product")),
					Build_DevicesTable()
				    ),
				    `Left(`HBox(
					`PushButton(`id(`devices_add_id), Label::AddButton()),
					`PushButton(`id(`devices_edit_id), Label::EditButton()),
					`PushButton(`id(`devices_del_id), Label::DeleteButton())
				    ))
			)));


list <map> multipaths_items = [];

/*
    build multipaths table from multipaths_items
*/
list<term> Build_MultipathsTable() {
    integer i = 0;
    list <term > table_items = maplist( map e, multipaths_items, {
				term item = `item(`id(i), e["alias"]:"", e["wwid"]:"NA");
				i = i + 1;
				return item;
			});
    return table_items;
}


term multipaths_config = `Frame(_("Multipaths"),
			    `VBox(
				`MinHeight(8, 
				    `Table(
					`id(`multipaths_table_id), `opt(`notify),
					`header(_("alias"), _("wwid")), 
					Build_MultipathsTable()
				    )
				),
				`Left(`HBox(
				    `PushButton(`id(`multipaths_add_id), Label::AddButton()),
				    `PushButton(`id(`multipaths_edit_id),  Label::EditButton()),
				    `PushButton(`id(`multipaths_del_id), Label::DeleteButton())
				))
			    )
			);

term tab_config = `VBox( 
			`id(`tab_config_id),
			`Top(multipaths_config),
			`VBox(
				`HVCenter(`PushButton(`id(`defaults_config_id), _("Configure Defaults"))),
				`HVCenter(`PushButton(`id(`device_config_id), _("Configure Devices"))),
				`HVCenter(`PushButton(`id(`blacklist_config_id), _("Configure Blacklist"))),
				`HVCenter(`PushButton(`id(`blacklist_exception_config_id), _("Configure Blacklist Exceptions")))
		    ));

term tab_status_summary = `RichText(`id(`status_summary_id), `opt(`plainText), "Status summary");

term tab_status = `VBox(
			`id(`tab_status_id),
			 start_stop_check,
			 tab_status_summary
		   );

/*
    build a fake DumbTab by button in Ncurses, for Ncurses does not support
    DumbTab now.
*/
term DumbTabs( list<term> items, term contents ) {
    term tabs = `HBox();
    foreach(term item, items, {
	string text = (string) item[1]:"";
	term idTerm = (term) item[0]:`id(`unknown);
	tabs = add(tabs, `PushButton( idTerm, text));
    });
    tabs = add(tabs, `HStretch());
    return `VBox( tabs, `Frame( "", contents ) );
}


list<term> tab_terms = [
	`term(`id(_("Status")), _("Status")),
	`term(`id(_("Configure")), _("Configure"))
];


term Tabs = UI::HasSpecialWidget(`DumbTab ) ?
		(
		    `DumbTab (`id (`tabs), [_("Status"), _("Configure")],
			      `ReplacePoint(`id(`tab_replace_id), tab_status))
		)
		:
		(
		    DumbTabs(
			tab_terms,
			`ReplacePoint(`id(`tab_replace_id), tab_status))
		);
term contents =  `HBox(
		    `id(`contents_id),
		    `HSpacing(3.5),
		    `ReplacePoint(`id(`contents_replace_id), `VBox(Tabs, `VSpacing(1.2)))
		    );

/*
    Read multipaths section from configuration file, store in multipaths_items
*/
boolean Read_MultipathConfig() {
    integer id = 0;
    list <map> builtin_multipaths_items = [];
    map multipaths_all = (map)SCR::Read(.etc.multipath.all.multipaths);
    if (multipaths_all != nil && multipaths_all != $[])
    {
	if (multipaths_all["kind"]:"" == "section" &&
	    multipaths_all["name"]:"" == "multipaths")
	{
	    if(multipaths_all["value"]:nil != nil && multipaths_all["value"]:[] != [])
	    {
		foreach(map sub_section, multipaths_all["value"]:[], {
			map<string, string> item = $[];
			if(sub_section["kind"]:"" != "section" || 
				sub_section["name"]:"" != "multipath" ) {
			    return;
			}
			
			list<map> value = sub_section["value"]:[];
			if(value == [])
			    return;
			
			foreach(map e, value, {
			    if (e["kind"]:"" != "value")
				return;
			    if (e["name"]:"" == "" || e["value"]:"" == "")
				return;
			    string name = rm_quotes(e["name"]:"NA");
			    string value = rm_quotes(e["value"]:"NA");
			    item[name] = value;
			});
			if(item["wwid"]:"" == "")
			    return;
			item["id"] = tostring(id);
			id = id + 1;
			multipaths_items = add(multipaths_items, item);
		});
    }}}

    /* load built-in configuration, which are not in /etc/multipath.conf */
    SCR::RegisterAgent(.content, `ag_ini(`IniAgent(builtin_multipath_conf_path,
	$[
	    "options"   : [ "global_values", "repeat_names" ],
	    "comments"  : [ "^[ \t]*#.*$", "^[ \t]*$" ],
	    "params"    : [ $[ "match" : [ "^[ \t]*([^ \t]+)[ \t]+([^ \t]+([ \t]*[^ \t]+)*)[ \t]*$", "%s %s" ]], ],
	    "sections"  : [
		$[
		    "begin" : [ "[ \t]*([^ \t]+)*[ \t]*\\{[ \t]*$", "%s {" ],
		    "end"   : [ "^[ \t]*\\}[ \t]*$", "}" ],
		],
	    ],
	    "subindent" : "\t"
	] )));
    multipaths_all = (map)SCR::Read(.content.all.multipaths);
    SCR::UnregisterAgent(.content);

    if (multipaths_all != nil && multipaths_all != $[])
    {
	if (multipaths_all["kind"]:"" == "section" &&
	    multipaths_all["name"]:"" == "multipaths")
	{
	    if(multipaths_all["value"]:nil != nil && multipaths_all["value"]:[] != [])
	    {
		foreach(map sub_section, multipaths_all["value"]:[], {
			map<string, string> item = $[];
			if(sub_section["kind"]:"" != "section" || 
				sub_section["name"]:"" != "multipath" ){
			    return;
			}
			
			list<map> value = sub_section["value"]:[];
			if(value == [])
			    return ;

			foreach(map e, value, {
			    if(e["kind"]:"" != "value")
				return;
			    if(e["name"]:"" == "" || e["value"]:"" == "")
				return;
			    string name = rm_quotes(e["name"]:"NA");
			    string value = rm_quotes(e["value"]:"NA");
			    item[name] = value;
			});
			if(item["wwid"]:"" == "" )
			    return;
			list<map> filter_ret = filter(map filter_e, multipaths_items, {
				if (item["wwid"]:"" == filter_e["wwid"]:"NA")
				    return true;
				else
				    return false;
			});
			if (filter_ret != nil && filter_ret != [])
			    return;
			item["id"] = tostring(id);
			id = id + 1;
			multipaths_items = add(multipaths_items, item);
		});
    }}}

    return true;
}

/*
    read defaults section from configuration file, store in defaults_items
*/
boolean  Read_DefaultsConfig() {
    list<map> value = [];
    map defaults_all = $[];

    /* initiate defaults_items  */
    foreach(symbol item, defaults_section_items, {
		string name = tostring(item);
		name = substring(name, 1);
		defaults_items[name] = "";
	});

    /* union builtin configurations and /etc/multipath.conf into one */
    SCR::RegisterAgent(.content, `ag_ini(`IniAgent(builtin_multipath_conf_path,
	$[
	    "options"   : [ "global_values", "repeat_names" ],
	    "comments"  : [ "^[ \t]*#.*$", "^[ \t]*$" ],
	    "params"    : [ $[ "match" : [ "^[ \t]*([^ \t]+)[ \t]+([^ \t]+([ \t]*[^ \t]+)*)[ \t]*$", "%s %s" ]], ],
	    "sections"  : [
		$[
		    "begin" : [ "[ \t]*([^ \t]+)*[ \t]*\\{[ \t]*$", "%s {" ],
		    "end"   : [ "^[ \t]*\\}[ \t]*$", "}" ],
		],
	    ],
	    "subindent" : "\t"
	] )));
    defaults_all = (map) SCR::Read(.content.all.defaults);
    SCR::UnregisterAgent(.content);

    if(defaults_all != nil && defaults_all != $[]) 
    {
	if(defaults_all != nil &&
	    ( defaults_all["kind"]:"" == "section" &&
	      defaults_all["name"]:"" == "defaults")  ) 
	{
	    value = defaults_all["value"]:[];
	    if(value != nil && value != []) 
	    {
		foreach(map item, value, {
		    string name_str = rm_quotes(item["name"]:"NA");
		    string value_str = rm_quotes(item["value"]:"NA");
		    defaults_items[name_str] = value_str;
		});
    }}}

    defaults_all = (map)SCR::Read(.etc.multipath.all.defaults);
    if(defaults_all != nil && defaults_all != $[]) 
    {
	if(defaults_all != nil &&
	    ( defaults_all["kind"]:"NA" == "section" &&
	      defaults_all["name"]:"NA" == "defaults")  ) 
	{
	    value = defaults_all["value"]:[];
	    if(value != nil && value != []) 
	    {
		foreach(map item, value, {
		    string name_str = rm_quotes(item["name"]:"NA");
		    string value_str = rm_quotes(item["value"]:"NA");
		    defaults_items[name_str] = value_str;
		});
    }}}
    return true;
}

/*
    read blacklist section from configuration file, store in blacklist_items
*/
boolean Read_BlacklistConfig() {
    list<map> value = [];
    map blacklist_all = (map)SCR::Read(.etc.multipath.all.blacklist);

    if (blacklist_all != nil && blacklist_all != $[]) 
    {
	if(blacklist_all["kind"]:"" == "section" &&
	   blacklist_all["name"]:"" == "blacklist") 
	{
	    value = blacklist_all["value"]:[];
	    if(value != []) 
	    {
		foreach(map e, value, {
			map item = $[];
			if(e["kind"]:"" == "value") {
			    item["name"] = rm_quotes(e["name"]:"NA");
			    item["value"] = rm_quotes(e["value"]:"NA");
			    item["type"] = "node";
			} else if(e["kind"]:"" == "section") {
			    list<map> subsection = e["value"]:[];
			    if(subsection == []) {
				return;
			    } else {
				map sub_item = $[];
				foreach(map sub_e, subsection, {
				    if(sub_e["kind"]:"" == "value"){
					string name = rm_quotes(sub_e["name"]:"");
					string value = rm_quotes(sub_e["value"]:"");
					if(size(name) > 0 && size(value) > 0) {
					    sub_item[name] = value;
					}
				    }
				});
				string product_str = rm_quotes(sub_item["product"]:"");
				string vendor_str = rm_quotes(sub_item["vendor"]:"");
				if(size(product_str) == 0 || size(vendor_str) == 0)
				    return;
				item["name"] = rm_quotes(e["name"]:"NA");
				item["type"] = "device";
				item["value"] = sub_item;
			    }
			} else {
			    return;
			}
			blacklist_items = add(blacklist_items, item);
		    });
    }}}

    /* union built-in configuration and /etc/multipath.conf into one */
    SCR::RegisterAgent(.content, `ag_ini(`IniAgent(builtin_multipath_conf_path,
	$[
	    "options"   : [ "global_values", "repeat_names" ],
	    "comments"  : [ "^[ \t]*#.*$", "^[ \t]*$" ],
	    "params"    : [ $[ "match" : [ "^[ \t]*([^ \t]+)[ \t]+([^ \t]+([ \t]*[^ \t]+)*)[ \t]*$", "%s %s" ]], ],
	    "sections"  : [
		$[
		    "begin" : [ "[ \t]*([^ \t]+)*[ \t]*\\{[ \t]*$", "%s {" ],
		    "end"   : [ "^[ \t]*\\}[ \t]*$", "}" ],
		],
	    ],
	    "subindent" : "\t"
	] )));
    blacklist_all = (map) SCR::Read(.content.all.blacklist);
    SCR::UnregisterAgent(.content);

    if (blacklist_all != nil && blacklist_all != $[]) 
    {
	if(blacklist_all["kind"]:"" == "section" &&
	   blacklist_all["name"]:"" == "blacklist") 
	{
	    value = blacklist_all["value"]:[];
	    if(value != []) 
	    {
		foreach(map e, value, {
			map item = $[];
			if(e["kind"]:"" == "value") {
			    item["name"] = rm_quotes(e["name"]:"NA");
			    item["value"] = rm_quotes(e["value"]:"NA");
			    item["type"] = "node";
			} else if(e["kind"]:"" == "section") {
			    list<map> subsection = e["value"]:[];
			    if(subsection == []) {
				return;
			    } else {
				map sub_item = $[];
				foreach(map sub_e, subsection, {
				    if(sub_e["kind"]:"" == "value"){
					string name = rm_quotes(sub_e["name"]:"");
					string value = rm_quotes(sub_e["value"]:"");
					if(size(name) > 0 && size(value) > 0) {
					    sub_item[name] = value;
					}
				    }
				});
				string product_str = rm_quotes(sub_item["product"]:"");
				string vendor_str = rm_quotes(sub_item["vendor"]:"");
				if(size(product_str) == 0 || size(vendor_str) == 0)
				    return;
				item["name"] = rm_quotes(e["name"]:"NA");
				item["type"] = "device";
				item["value"] = sub_item;
			    }
			} else {
			    return;
			}
			if(contains(blacklist_items, item) == true)
			    return;
			blacklist_items = add(blacklist_items, item);
		});
    }}}

    integer id = 0;
    blacklist_items = maplist(map e, blacklist_items, {
	e["id"] = tostring(id);
	id = id + 1;
	return e;
    });
    return true;
}


/*
    read blacklist_exception section from configuration file, 
    store in blacklist_exception_items
*/
boolean Read_BlacklistException_Config() {
    list<map> value = [];
    map blacklist_all = (map)SCR::Read(.etc.multipath.all.blacklist_exceptions);

    if (blacklist_all != nil && blacklist_all != $[]) 
    {
	if(blacklist_all["kind"]:"" == "section" &&
	   blacklist_all["name"]:"" == "blacklist_exceptions") 
	{
	    value = blacklist_all["value"]:[];
	    if(value != []) 
	    {
		foreach(map e, value, {
			map item = $[];
			if(e["kind"]:"" == "value") {
			    item["name"] = rm_quotes(e["name"]:"NA");
			    item["value"] = rm_quotes(e["value"]:"");
			    item["type"] = "node";
			} else if(e["kind"]:"" == "section") {
			    list<map> subsection = e["value"]:[];
			    if(subsection == []) {
				return;
			    } else {
				map sub_item = $[];
				foreach(map sub_e, subsection, {
				    if(sub_e["kind"]:"" == "value"){
					string name = rm_quotes(sub_e["name"]:"");
					string value = rm_quotes(sub_e["value"]:"");
					if(size(name) > 0 && size(value) > 0) {
					    sub_item[name] = value;
					}
				    }
				});
				string product_str = rm_quotes(sub_item["product"]:"NA");
				string vendor_str = rm_quotes(sub_item["vendor"]:"NA");
				if(size(product_str) == 0 || size(vendor_str) == 0)
				    return;
				item["name"] = rm_quotes(e["name"]:"NA");
				item["type"] = "device";
				item["value"] = sub_item;
			    }
			} else {
			    return;
			}
			blacklist_exception_items = add(blacklist_exception_items, item);
		    });
    }}}

    /* union built-in configuration and /etc/multipath.conf into one */
    SCR::RegisterAgent(.content, `ag_ini(`IniAgent(builtin_multipath_conf_path,
	$[
	    "options"   : [ "global_values", "repeat_names" ],
	    "comments"  : [ "^[ \t]*#.*$", "^[ \t]*$" ],
	    "params"    : [ $[ "match" : [ "^[ \t]*([^ \t]+)[ \t]+([^ \t]+([ \t]*[^ \t]+)*)[ \t]*$", "%s %s" ]], ],
	    "sections"  : [
		$[
		    "begin" : [ "[ \t]*([^ \t]+)*[ \t]*\\{[ \t]*$", "%s {" ],
		    "end"   : [ "^[ \t]*\\}[ \t]*$", "}" ],
		],
	    ],
	    "subindent" : "\t"
	] )));
    blacklist_all = (map) SCR::Read(.content.all.blacklist_exceptions);
    SCR::UnregisterAgent(.content);

    if (blacklist_all != nil && blacklist_all != $[]) 
    {
	if(blacklist_all["kind"]:"" == "section" &&
	   blacklist_all["name"]:"" == "blacklist") 
	{
	    value = blacklist_all["value"]:[];
	    if(value != []) 
	    {
		foreach(map e, value, {
			map item = $[];
			if(e["kind"]:"" == "value") {
			    item["name"] = rm_quotes(e["name"]:"NA");
			    item["value"] = rm_quotes(e["value"]:"");
			    item["type"] = "node";
			} else if(e["kind"]:"" == "section") {
			    list<map> subsection = e["value"]:[];
			    if(subsection == []) {
				return;
			    } else {
				map sub_item = $[];
				foreach(map sub_e, subsection, {
				    if(sub_e["kind"]:"" == "value"){
					string name = rm_quotes(sub_e["name"]:"");
					string value = rm_quotes(sub_e["value"]:"");
					if(size(name) > 0 && size(value) > 0) {
					    sub_item[name] = value;
					}
				    }
				});
				string product_str = rm_quotes(sub_item["product"]:"NA");
				string vendor_str = rm_quotes(sub_item["vendor"]:"NA");
				if(size(product_str) == 0 || size(vendor_str) == 0)
				    return;
				item["name"] = rm_quotes(e["name"]:"NA");
				item["type"] = "device";
				item["value"] = sub_item;
			    }
			} else {
			    return;
			}
			if(contains(blacklist_exception_items, item) == true)
			    return;
			blacklist_exception_items = add(blacklist_exception_items, item);
		});
    }}}

    integer id = 0;
    foreach(map e, blacklist_exception_items, {
	e["id"] = tostring(id);
	id = id + 1;
    });

    return true;
}

    
/*
    read device section from configuration file, store in devices_items
*/
boolean Read_DeviceConfig() {
    integer id = 0;
    map devices_all = (map)SCR::Read(.etc.multipath.all.devices);

    if (devices_all != nil && devices_all != $[]) 
    {
	if (devices_all["kind"]:"" == "section" &&
	    devices_all["name"]:"" == "devices")
	{
	    if(devices_all["value"]:nil != nil && devices_all["value"]:[] != [])
	    {
		foreach(map sub_section, devices_all["value"]:[], {
			map <string, string> item = $[];
			if(sub_section["kind"]:"" != "section" ||
			    sub_section["name"]:"" != "device") {
				return;
			}
			list<map> value = sub_section["value"]:[];
			if(value == [])
			    return;
	
			foreach(map e, value, {
			    if(e["kind"]:"" != "value")
				return;
			    if(e["name"]:"" == "" || e["value"]:"" == "")
				return;
			    string name = rm_quotes(e["name"]:"NA");
			    string value = rm_quotes(e["value"]:"NA");
			    item[name] = value;
			});
			/* for configuration without "vendor" or "product", do not
			   read it into Yast module.
			*/
			if(item["vendor"]:"" == "" ||
			    item["product"]:"" == ""){
				return;
			}
			item["id"] = tostring(id);
			id = id + 1;
			devices_items = add(devices_items, item);
		});
    }}}


    /* union built-in configuration and /etc/multipath.conf into one */
    SCR::RegisterAgent(.content, `ag_ini(`IniAgent(builtin_multipath_conf_path,
	$[
	    "options"   : [ "global_values", "repeat_names" ],
	    "comments"  : [ "^[ \t]*#.*$", "^[ \t]*$" ],
	    "params"    : [ $[ "match" : [ "^[ \t]*([^ \t]+)[ \t]+([^ \t]+([ \t]*[^ \t]+)*)[ \t]*$", "%s %s" ]], ],
	    "sections"  : [
		$[
		    "begin" : [ "[ \t]*([^ \t]+)*[ \t]*\\{[ \t]*$", "%s {" ],
		    "end"   : [ "^[ \t]*\\}[ \t]*$", "}" ],
		],
	    ],
	    "subindent" : "\t"
	] )));
    devices_all = (map) SCR::Read(.content.all.devices);
    SCR::UnregisterAgent(.content);

    if (devices_all != nil && devices_all != $[]) 
    {
	if (devices_all["kind"]:"" == "section" &&
	    devices_all["name"]:"" == "devices")
	{
	    if(devices_all["value"]:nil != nil && devices_all["value"]:[] != [])
	    {
		foreach(map sub_section, devices_all["value"]:[], {
			map <string, string> item = $[];
			if(sub_section["kind"]:"" != "section" ||
			    sub_section["name"]:"" != "device") {
				return;
			}
	
			list<map> value = sub_section["value"]:[];
			if(value == [])
			    return;
	
			foreach(map e, value, {
			    if(e["kind"]:"" != "value")
				return;
			    if(e["name"]:"" == "" || e["value"]:"" == "")
				return;
			    string name = rm_quotes(e["name"]:"NA");
			    string value = rm_quotes(e["value"]:"NA");
			    item[name] = value;
			});
			/* for configuration without "vendor" or "product", do not
			   read it into Yast module.
			*/
			if(item["vendor"]:"" == "" ||
			    item["product"]:"" == ""){
				return;
			}
			list<map> filter_ret = filter(map filter_e, devices_items, {
			    if (filter_e["vendor"]:"" == item["vendor"]:"NA" && 
				filter_e["product"]:"" == item["product"]:"NA")
				return true;
			    else
				return false;
			});
			if( filter_ret != nil && 
			    filter_ret != [])
				return;
			item["id"] = tostring(id);
			id = id + 1;
			devices_items = add(devices_items, item);
		});
		
    }}}

    return true;
}

/* update proper value in the widget which generated by Get_multipath_default_confs() */
void update_multipath_details(map item) {
    foreach(symbol item_symbol, multipath_detail_items, {
	void (map) update_handler = update_term_handlers[item_symbol]:(void (map))nil;
	if (update_handler == nil)
	{
	    Popup::Message(sformat("update term handler for %1 does not exist", item_symbol));
	    return;
	}
	update_handler(item);
    });
}

/* build defaults configuration entry in multipath configuration, this function make source code 
   more clear
*/
term build_multipath_details(){
    term confs_term = `VBox(`Empty());
    integer counter = 0;
    integer item_per_line = 2;
    term line = `HBox(`Empty());

    foreach(symbol item_symbol, multipath_detail_items, {
	term (symbol) build_handler = build_term_handlers[item_symbol]:(term (symbol))nil;
	if (build_handler == nil)
	{
	    Popup::Message(sformat("build term handler for %1 does not exist", item_symbol));
	    return;
	}
	line = add(line, `HWeight(1, build_handler(`all)));
	counter = counter + 1;
	if ((counter % item_per_line) == 0)
	{
	    confs_term = add(confs_term, line);
	    line = `HBox(`Empty());
	}
    });
    return confs_term;
}

/* check if user input is legal, and popup necessary information */
boolean check_mp_config(map item) 
{
    boolean result = true;
    string prop_info = _("Illegal parameters:\n");

    foreach(symbol item_name, multipath_brief_items, {
	map ret = $[];
	map (map) check_handler = check_handlers[item_name]:(map (map))nil;
	if (check_handler != nil)
	{
	    ret = check_handler(item);
	    if (ret == nil)
	    {
		Popup::Message(sformat("check handler for %1 is not implemented yet", item_name));
	    } else if (ret["result"]:false == false) {
		prop_info = prop_info + ret["info"]:"";
		result = false;
	    }
	} else {
	    Popup::Message(sformat("check handler does not exist for %1", item_name));
	}
    });
    
    if(result == false) 
    {
	Popup::Message(prop_info);
	return result;
    }

    foreach(symbol item_name, multipath_detail_items, {
	map ret = $[];
	map (map) check_handler = check_handlers[item_name]:(map (map))nil;
	if (check_handler != nil)
	{
	    ret = check_handler(item);
	    if (ret == nil)
	    {
		Popup::Message(sformat("check handler for %1 is not implemented yet", item_name));
	    } if (ret["result"]:false == false) {
		prop_info = prop_info + ret["info"]:"";
		result = false;
	    }
	} else {
	    Popup::Message(sformat("check handler does not exist for %1", item_name));
	}
    });

    if(result == false) 
    {
	Popup::Message(prop_info);
	return result;
    }

    /* duplicated configuraton checking */
    foreach(map e, multipaths_items, {
	if(e["id"]:"NA" != item["id"]:"na" &&
		(e["wwid"]:"NA" == item["wwid"]:"na"))
	{
	    prop_info = _("Duplicated configuration.");
	    Popup::Message(prop_info);
	    result = false;
	    break;
	}
    });

    return result;
}

/*
    if table_item == nil, means add a new item	
*/
void Edit_Multipaths_Dialog(term table_item) {
    map cur_item = $[];
    if(table_item != nil) {
	list<map> config_item = filter( map item, multipaths_items, {
				return (item["wwid"]:"NA" == table_item[2]:"");
			});
	cur_item = config_item[0]:nil;
	if(cur_item == nil) return;
    }

    /* used for store undecided input */
    map temp_cur_item = cur_item;
    temp_cur_item["id"] = (cur_item == $[]) ?
		get_newid(multipaths_items) : cur_item["id"]:"0";

    term multipaths_item_edit = `VBox(
				    `HWeight(1, `HBox(build_wwid_term(`dummy))),
				    `HWeight(1, `HBox(build_alias_term(`dummy))),
				    `VBox(`ReplacePoint(`id(`replace_mp_defaults_confs_id),
							`VBox(`Left(`HBox(`CheckBox(`id(`show_details_id), 
										`opt(`notify), 
										_("Show Details"), 
										false
					)))))));
    UI::OpenDialog(`opt(`decorated),
		    `VBox(
			multipaths_item_edit,
			`HSpacing(1),
			`HBox(
			    `PushButton(`id(`ok), `opt(`default), Label::OKButton()),
			    `PushButton(`id(`cancel), Label::CancelButton())
		)));

    update_wwid_term(temp_cur_item);
    update_alias_term(temp_cur_item);
    UI::SetFocus(`id(`wwid));
    temp_string_values = $[];
    any ret = nil;

    while(true) {
	ret = UI::UserInput();
	if (replacewidget_notify == true)
	{
	    replacewidget_notify = false;
	    continue;
	}
	if(ret == `show_details_id) {
	    boolean checked = (boolean) UI::QueryWidget(`id(`show_details_id), `Value);
	    if(checked == true) {
		UI::ReplaceWidget(`id(`replace_mp_defaults_confs_id), 
				`VBox(`Left(`HBox(`CheckBox(`id(`show_details_id),
								`opt(`notify),
								_("Show Details"),
								true
						))),
					build_multipath_details()
		));
		update_multipath_details(temp_cur_item);
	    } else {
		UI::ReplaceWidget(`id(`replace_mp_defaults_confs_id), 
				`VBox(`Left(`HBox(`CheckBox(`id(`show_details_id),
								`opt(`notify),
								_("Show Details"),
								false
						)))));
	    }
	} else if (contains(multipath_detail_items, (symbol) ret) == true ||
		    contains(multipath_brief_items, (symbol) ret) == true) {
	    map (map) handler = default_item_handlers[(symbol)ret]:(map (map))nil;
	    if (handler != nil)
		temp_cur_item = handler(temp_cur_item);
	    else
		Popup::Message(sformat("Can not find handler for %1", ret));
	} else if (ret == `ok) {
	    if (check_mp_config(temp_cur_item) == true)
	    {
		config_modified = true;
		/* update the multipaths configuraton items */
		if(table_item != nil) {
		    multipaths_items = maplist( map item, multipaths_items, {
			    if(table_item[2]:"NA" == item["wwid"]:"na")
				return temp_cur_item;
			    else
				return item;
			});
		} else {
		    multipaths_items = add(multipaths_items, temp_cur_item);
		}
		break;
	    }
	} else if (ret == `cancel){
	    break;
	} else {
	    Popup::Message(sformat("Edit_Multipaths_Dialog: unexpected ret %1", ret));
	}
    }

    UI::CloseDialog();
    return ;
}

void Multipath_Dialog(symbol option)
{
    if (option == `multipaths_del_id)
    {
	integer cur = (integer) UI::QueryWidget(`id(`multipaths_table_id), `CurrentItem);
	term cur_item = (term) UI::QueryWidget(`id(`multipaths_table_id), `Item(cur));
	multipaths_items = filter( map item, multipaths_items, {
			string alias = sformat("%1", cur_item[1]:"NA");
			boolean ret = false;
			ret = (item["alias"]:"NA" != alias);
			if(ret == false)
			    config_modified = true;
			return (ret);
	});
	UI::ChangeWidget(`id(`multipaths_table_id), `Items, Build_MultipathsTable());
    } else if (option == `multipaths_edit_id ||
		option == `multipaths_table_id) {
	integer cur = (integer) UI::QueryWidget(`id(`multipaths_table_id), `CurrentItem);
	term cur_item = (term) UI::QueryWidget(`id(`multipaths_table_id), `Item(cur));
	Edit_Multipaths_Dialog(cur_item);
	UI::ChangeWidget(`id(`multipaths_table_id), `Items, Build_MultipathsTable());
	UI::ChangeWidget(`id(`multipaths_table_id), `CurrentItem, cur);
    } else if (option == `multipaths_add_id) {
	Edit_Multipaths_Dialog(nil);
	UI::ChangeWidget(`id(`multipaths_table_id), `Items, Build_MultipathsTable());
    } else {
	Popup::Message(sformat("Multipath_Dialog: unexpected option %1", option));
    }
}

/*
    build defaults configuration widget
*/
term build_defaults_item (map item) {
    term ret = `Empty();
    string name = item["name"]:"NA";
    symbol item_name = symbolof(toterm(name));

    term (symbol) build_handler = build_term_handlers[item_name]:(term (symbol))nil;
    if (build_handler == nil)
	Popup::Message(sformat("handler for %1 is not implemented yet", item_name));
    else
	ret = build_handler(`all);
    return ret;
}

void update_defaults_item (map item) {
    string name = item["name"]:"NA";
    string value = item["value"]:"NA";
    map item_map = $[];
    symbol item_name = symbolof(toterm(name));
    item_map[name] = value;

    void (map) update_handler = update_term_handlers[item_name]:(void (map))nil;
    if (update_handler == nil)
    {
	Popup::Message(sformat("handler for %1 is not implemented yet", item_name));
    } else {
	update_handler(item_map);
	UI::SetFocus(`id(item_name));
    }
}


/* do not do with number id */
string defaults_symbol_to_str(any value) {
    string str = nil;
    
    if(value != nil && is(value, symbol)) {
	if(value == `combobox_df_non_id) {
	    str = "";
	}else if(value == `combobox_df_roundrobin_id) {
	    str = "round-robin 0";
	}else if (value == `combobox_df_multibus_id) {
	    str = "multibus";
	}else if(value == `combobox_df_readsector0_id) {
	    str = "readsector0";
	}else if(value ==`combobox_df_tur_id) {
	    str = "tur";
	}else if(value ==`combobox_df_emc_clariion_id) {
	    str = "emc_clariion";
	}else if(value ==`combobox_df_hp_sw_id) {
	    str = "hp_sw";
	}else if(value ==`combobox_df_directio_id) {
	    str = "directio";
	}else if(value ==`combobox_df_priorities_id) {
	    str = "priorities";
	}else if(value ==`combobox_df_uniform_id) {
	    str = "uniform";
	}else if(value ==`combobox_df_manual_id) {
	    str = "manual";
	}else if(value ==`combobox_df_immediate_id) {
	    str = "immediate";
	}else if(value ==`combobox_df_queue_id) {
	    str = "queue";
	}else if(value ==`combobox_df_fail_id) {
	    str = "fail";
	}else if(value ==`combobox_df_yes_id) {
	    str = "yes";
	}else if(value == `combobox_df_no_id) {
	    str = "no";
	}else{
	    Popup::Message(sformat("unknow value: `%1'", value));
	}
    } else {
	Popup::Message(sformat("paramter is not symbol: `%1'", value));
    }
    return str;
}

boolean check_df_config(map item) 
{
    map ret = $[];
    boolean result = false;
    string prop_info = _("Illegal parameter:") + "\n";
    string name_str = item["name"]:"NA";
    string value_str = item["value"]:"NA";
    symbol item_name = symbolof(toterm(name_str));
    map (map) check_handler = check_handlers[item_name]:(map (map))nil;

    if (check_handler == nil)
    {
	Popup::Message(sformat("can not find check handler for %1", item_name));
	result = false;
    } else {
	map item_map = $[];
	item_map[name_str] = value_str;
	ret = check_handler(item_map);
	if (ret == nil)
	{
	    Popup::Message(sformat("check handler for %1 is not implemented yet", item_name));
	    result = false;
	} 
	result = ret["result"]:false;
	if (result == false) {
	    prop_info = prop_info + ret["info"]:"";
	    Popup::Message(prop_info);
	}
    }
    return result;
}

void Edit_Defaults_Dialog(term table_item) {
    string cur_item_name = table_item[1]:"NA";
    string cur_item_value = defaults_items[cur_item_name]:"NA";
    map cur_item = $["name" : cur_item_name, "value" : cur_item_value];
    temp_string_values = $[];

    UI::OpenDialog(`opt(`decorated),
		    `VBox(`HBox(`HWeight(1, build_defaults_item(cur_item))),
			`HSpacing(1),
			`HBox(
			    `PushButton(`id(`ok), Label::OKButton()),
			    `PushButton(`id(`cancel), `opt(`default), Label::CancelButton())
		)));
    update_defaults_item(cur_item);

    any ret = nil;
    while(true) {
	any value = nil;
	ret = UI::UserInput();
	if (replacewidget_notify == true)
	{
	    replacewidget_notify = false;
	    continue;
	}

	if (contains(defaults_section_items, (symbol) ret) == true)
	{
	    map (map) default_handler = default_item_handlers[ret]:(map (map))nil;
	    if (default_handler != nil) {
		map item_map = $[];
		string name_str = cur_item["name"]:"NA";
		string value_str = cur_item["value"]:"NA";
		item_map[name_str] = value_str;
		item_map = default_handler(item_map);
		cur_item["value"] = item_map[name_str]:"NA";
	    } else
		Popup::Message(sformat("handler for %1 is not implemented yet", ret));
	} else if(ret == `ok) {
	    if(check_df_config(cur_item) == true) {
		string name_str = cur_item["name"]:"NA";
		string value_str = cur_item["value"]:"";
		defaults_items[name_str] = value_str;
		config_modified = true;
		break;
	    }
	} else {
	    break;
	}
    }
    UI::CloseDialog();
    return ;
}

any Defaults_Dialog() {
    Wizard::SetContentsButtons(caption, contents, HELPS["Defaults_help"]:"",
	    Label::BackButton(), Label::OKButton());
    UI::ReplaceWidget(`id(`contents_replace_id), defaults_config);
    UI::ChangeWidget(`id(`defaults_table_id), `Items, Build_DefaultsTable());

    any ret = nil;
    while(true) {
	ret = UI::UserInput();
	if(ret == `defaults_del_id) {
	    symbol cur = (symbol) UI::QueryWidget(`id(`defaults_table_id), `CurrentItem);
	    term table_item = (term) UI::QueryWidget(`id(`defaults_table_id), `Item(cur));
	    string name_str = table_item[1]:"NA";
	    defaults_items[name_str] = "";
	    UI::ChangeWidget(`id(`defaults_table_id), `Items, Build_DefaultsTable());
	    UI::ChangeWidget(`id(`defaults_table_id), `CurrentItem, cur);
	    continue;
	} else if(ret == `defaults_edit_id || ret == `defaults_table_id) {
	    symbol cur = (symbol) UI::QueryWidget(`id(`defaults_table_id), `CurrentItem);
	    term cur_item = (term) UI::QueryWidget(`id(`defaults_table_id), `Item(cur));
	    Edit_Defaults_Dialog(cur_item);
	    UI::ChangeWidget(`id(`defaults_table_id), `Items, Build_DefaultsTable());
	    UI::ChangeWidget(`id(`defaults_table_id), `CurrentItem, cur);
	    continue;
	} else {
		break;
	}
    }
    return ret;
}

void Update_Multipaths_Config(term table_item, map config_item) {
    if(table_item == nil || config_item == nil) return;

    multipaths_items = maplist( map item, multipaths_items, {
				if(table_item[1]:"NA" == item["alias"]:"na")
				    return config_item;
				else
				    return item;
			});
}

map Build_Multipath_Conf() {

    /* defaults section 
	if value is empty, only write name into configuration file.
    */
    list <map> defaults_value = [];
    foreach(string name_str, string value_str, defaults_items, {
		symbol item_name = symbolof(toterm(name_str));
		map entry = $["comment" : "", "kind" : "value", "type" : 0];
		entry["name"] = name_str;
		entry["value"] = add_quotes(value_str);
		if (contains(defaults_section_items, item_name) == true &&
		    entry["value"]:"" != "")
			defaults_value = add(defaults_value, entry);
    });
    map defaults_root = $[	"comment":"#\n# This configuration file is generated by Yast, do not modify it\n# manually please. \n#\n", 
				"file":-1,
				"kind":"section",
				"name":"defaults",
				"type":0,
				"value":defaults_value
			];

    /* blacklist section
	if value is empty, do not write name into configuration file.
     */
    list blacklist_value = [];
    foreach(map e, blacklist_items, {
		map entry = $[];
		if(e["type"]:"" == "device") {
		    map sub_e = e["value"]:$[];
		    if(sub_e == $[])
			return;
		    if(size((string) sub_e["vendor"]:"") == 0 ||
			size((string) sub_e["product"]:"") == 0) 
			return;
		    entry["comment"] = "";
		    entry["file"] = -1;
		    entry["kind"] = "section";
		    entry["name"] = "device";
		    entry["type"] = 0;
		    entry["value"] = [$["comment":"",
					"kind":"value", 
					"name":"vendor", 
					"type":0, 
					"value":add_quotes(sub_e["vendor"]:"")], 
				      $["comment":"", 
					"kind":"value", 
					"name":"product", 
					"type":0, 
					"value":add_quotes(sub_e["product"]:"")]];
		} else if(size((string) e["name"]:"") > 0 && size((string) e["value"]:"") > 0){
		    entry["comment"] = "";
		    entry["kind"] = "value";
		    entry["name"] = e["name"]:"NA";
		    entry["type"] = 0;
		    entry["value"] = add_quotes(e["value"]:"");
		} else {
		    entry["comment"] = "";
		    entry["kind"] = "value";
		    entry["name"] = e[0]:"NA";
		    entry["type"] = 0;
		    entry["value"] = add_quotes(e[1]:"NA");
		}
		blacklist_value = add(blacklist_value, entry);
	});
    map blacklist_root = $[	"comment":"",
				"file":-1,
				"kind":"section",
				"name":"blacklist",
				"type":0, 
				"value":blacklist_value
			];


    /* blacklist_exception section
	if value is empty, do not write name into configuration file.
     */
    list blacklist_exception_value = [];
    foreach(map e, blacklist_exception_items, {
		map entry = $[];
		if(e["type"]:"" == "device") {
		    map sub_e = e["value"]:$[];
		    if(sub_e == $[])
			return;
		    if(size((string) sub_e["vendor"]:"") == 0 ||
			size((string) sub_e["product"]:"") == 0) 
			return;
		    entry["comment"] = "";
		    entry["file"] = -1;
		    entry["kind"] = "section";
		    entry["name"] = "device";
		    entry["type"] = 0;
		    entry["value"] = [$["comment":"",
					"kind":"value", 
					"name":"vendor", 
					"type":0, 
					"value":add_quotes(sub_e["vendor"]:"")], 
				      $["comment":"", 
					"kind":"value", 
					"name":"product", 
					"type":0, 
					"value":add_quotes(sub_e["product"]:"")]];
		} else if(size((string) e["name"]:"") > 0 && size((string) e["value"]:"") > 0){
		    entry["comment"] = "";
		    entry["kind"] = "value";
		    entry["name"] = e["name"]:"NA";
		    entry["type"] = 0;
		    entry["value"] = add_quotes(e["value"]:"");
		} else {
		    entry["comment"] = "";
		    entry["kind"] = "value";
		    entry["name"] = e[0]:"NA";
		    entry["type"] = 0;
		    entry["value"] = add_quotes(e[1]:"NA");
		}
		blacklist_exception_value = add(blacklist_exception_value, entry);
	});
    map blacklist_exception_root = $[	"comment":"",
					"file":-1,
					"kind":"section",
					"name":"blacklist_exceptions",
					"type":0, 
					"value":blacklist_exception_value
				];

    /* multipaths section 
	if value is empty, do not write name into configuration file.
    */
    list <map> multipaths_value = [];
    foreach(map e, multipaths_items, {
		list <map>value = [];
		foreach(string k, string v, (map<string, string>)e, { 
				if(k != "id" && v != nil && size(v) > 0) {
				    value = add(value, $["comment":"",
						     "kind":"value", 
						     "name":k,
						     "type":0, 
						     "value":add_quotes(v)]);
				}
			}); 
		map subsection = $[	"comment":"",
					"file":-1,
					"kind":"section",
					"name":"multipath",
					"type":0,
					"value":value
				];
		multipaths_value = add(multipaths_value, subsection);

	});
    map multipaths_root = $[	"comment":"",
				"file":-1,
				"kind":"section", 
				"name":"multipaths",
				"type":0,
				"value":multipaths_value
			];

    /* devices section 
	if value is empty, do not write name into configuration file.
    */
    list <map> devices_value = [];
    maplist(map e, devices_items, {
		list value = [];
		foreach(string k, string v, (map<string, string>)e, { 
				if(k != "id" && v != nil && size(v) > 0) {
				    value = add(value, $["comment":"",
							"kind":"value", 
							"name":k, 
							"type":0, 
							"value":add_quotes(v)]);
				}
			});
		map subsection = $[	"comment":"",
					"file":-1, 
					"kind":"section",
					"name":"device",
					"type":0,
					"value":value
				];
		devices_value = add(devices_value, subsection);
	});
    map devices_root = $[	"comment":"",
				"file":-1,
				"kind":"section",
				"name":"devices",
				"type":0,
				"value":devices_value
			];

    list <map> all_value = [	defaults_root, 
				blacklist_root,
				blacklist_exception_root,
				multipaths_root, 
				devices_root
			    ];
    map all_root = $[	"comment":"",
			"file":-1,
			"kind":"section",
			"name":"",
			"type":-1,
			"value":all_value
		     ];
    return all_root;

}



void delete_blacklist_item(term table_item) {
    blacklist_items = filter(map e, blacklist_items, {
			boolean match = true;
			string value = nil;
			if(table_item[1]:"" == "device" && e["type"]:"" == "device") {
			    map sub_e = e["value"]:$[];
			    if(sub_e != $[]){
				value = sformat(device_template, sub_e["vendor"]:"NA", sub_e["product"]:"NA");
				match = (e["name"]:"" == table_item[1]:"na" &&
					value == table_item[2]:"na");
			    } 
			} else if(e["type"]:"" == "node"){
			    match = (e["name"]:"" == table_item[1]:"na" && e["value"]:"" == table_item[2]:"na");
			} else {
			    match = false;
			}
			if(match == true)
			    config_modified = true;
			return (!match);
		});
}

boolean check_bl_config(map item) {
    string prop_info = _("Illegal parameters:") + "\n";
    string type_str = "";
    boolean result = false;
    map ret = $[];
    map item_map = $[];
    map (map) check_handler = (map (map)) nil;

    type_str = item["type"]:"";
    if (type_str == "device")
    {
	map sub_item = item["value"]:$[];
	if (sub_item == $[])
	{
	    Popup::Message(sformat("can not find sub_item from %1", item));
	    return false;
	}
	string vendor_str = sub_item["vendor"]:"";
	string product_str = sub_item["product"]:"";

	check_handler = check_handlers[`vendor]:(map (map))nil;
	if (check_handler == nil)
	{
	    Popup::Message("check handler for `vendor does not exist");
	    return false;
	}
	item_map["vendor"] = vendor_str;
	ret = check_handler(item_map);
	result = ret["result"]:false;
	if (result == false)
	    prop_info = prop_info + ret["info"]:"";

	check_handler = check_handlers[`product]:(map (map))nil;
	if (check_handler == nil)
	{
	    Popup::Message("check handler for `product does not exist");
	    return false;
	}
	item_map["product"] = product_str;
	ret = check_handler(item_map);
	result = ret["result"]:false;
	if (result == false)
	    prop_info = prop_info + ret["info"]:"";
    } else if (type_str == "node") {
	string name_str = item["name"]:"NA";
	string value_str = item["value"]:"";
	symbol item_name = symbolof(toterm(name_str));
	check_handler = check_handlers[item_name]:(map (map))nil;
	if (check_handler == nil)
	{
	    Popup::Message(sformat("check handler for %1 does not exist", item_name));
	    return false;
	}
	item_map[name_str] = value_str;
	ret = check_handler(item_map);
	result = ret["result"]:false;
	if (result == false)
	    prop_info = prop_info + ret["info"]:"";
    } else {
	Popup::Message(sformat("check_bl_config: unexpected type %1", type_str));
	return false;
    }

    if (result == false)
    {
	Popup::Message(prop_info);
	return result;
    }
    foreach(map e, blacklist_items, {
	if (e == $[])
	{
	    result = true;
	    break;
	}
	if(e["id"]:"" == item["id"]:"na") 
	    return;
	if(e["type"]:"" == "device") {
	    map sub_e = e["value"]:$[];
	    map sub_item = item["value"]:$[];
	    if(sub_e != $[] && sub_item != $[]) {
		if(sub_item["vendor"]:"NA" == sub_e["vendor"]:"" && 
		   sub_item["product"]:"NA" == sub_e["product"]:"")
		{
		    result = false;
		    break;
		}
	    }
	} else {
	    if(item["name"]:"NA" == e["name"]:"" && 
		item["value"]:"NA"  == e["value"]:"") 
	    {
		result = false;
		break;
	    }		
	}
    }); 

    if(result == false) 
	Popup::Message(_("Duplicated configuration."));

    return result;
}

term build_edit_blacklist_terms(map item)
{
    term ret = `Empty();
    string type_str = item["type"]:"";
    if (type_str == "node")
    {
	string name_str = item["name"]:"NA";
	symbol item_name = symbolof(toterm(name_str));
	term (symbol) build_handler = 
		build_term_handlers[item_name]:(term (symbol))nil;
	if (build_handler == nil)
	{
	    Popup::Message(sformat(
		"build_edit_blacklist_terms: build handler for %1 does not exist", item_name));
	} else {
	    ret = `VBox(
		    `HBox(`TextEntry(`id(`blacklist_item), _("item"), "")),
		    `HBox(build_handler(`all))
		);
	}
    } else if (type_str == "device") {
	ret = `VBox(
		`HBox(`TextEntry(`id(`blacklist_item), _("item"), "")),
		`HBox(build_vendor_term(`all)),
		`HBox(build_product_term(`all))
		);
    } else {
	Popup::Message(sformat("build_edit_blacklist_terms: unexpected type %1", type_str));
    }
    return ret;
}

void update_edit_blacklist_items(map item)
{
    string type_str = item["type"]:"NA";
    map map_item = $[];

    if (type_str == "device")
    {
	UI::ChangeWidget(`id(`blacklist_item), `Value, "device");
	UI::ChangeWidget(`id(`blacklist_item), `Enabled, false);

	map sub_item = item["value"]:$[];
	if (sub_item == $[])
	{
	    Popup::Message(sformat("No value in subitem `%1'", item));
	    return;
	}
	string vendor_str = sub_item["vendor"]:"";
	string product_str = sub_item["product"]:"";
	if (contains(blacklist_section_items, `vendor) == false ||
	    contains(blacklist_section_items, `product) == false)
	{
	    Popup::Message("`vendor or `product is not in valid blacklist items");
	    return;
        }
	void (map) update_handler = update_term_handlers[`vendor]:(void (map))nil;
	if (update_handler == nil)
	{
	    Popup::Message("update_edit_blacklist_items: update handler for `vendor does not exist");
	    return;
	} else {
	    map map_item = $[];
	    map_item["vendor"] = vendor_str;
	    update_handler(map_item);
	}
	update_handler = update_term_handlers[`product]:(void (map))nil;
	if (update_handler == nil)
	{
	    Popup::Message("update_edit_blacklist_items: update handler for `product does not exist");
	    return;
	} else {
	    map map_item = $[];
	    map_item["product"] = product_str;
	    update_handler(map_item);
	}
    } else {
	string name_str = item["name"]:"NA";
	string value_str = item["value"]:"";
	map_item[name_str] = value_str;
	symbol item_name = symbolof(toterm(name_str));

	UI::ChangeWidget(`id(`blacklist_item), `Value, name_str);
	UI::ChangeWidget(`id(`blacklist_item), `Enabled, false);

	if (contains(blacklist_section_items, item_name) == true)
	{
	    void (map) update_handler = update_term_handlers[item_name]:(void (map))nil;
	    if (update_handler != nil)
		update_handler(map_item);
	    else
		Popup::Message(sformat(
		    "update_edit_blacklist_items: update handler for %1 does not exist", item_name));
	} else {
	    Popup::Message(sformat("item %1 is not in valid blacklist items", item_name));
	}
    }
}

void Edit_Blacklist_Dialog(term table_item) {
    list<map> config_item = filter(map item, blacklist_items, {
		boolean match = true;
		if(table_item[1]:"NA" == "device" && item["type"]:"NA" == "device" ) {
		    map sub_item = item["value"]:$[];
		    string value = sformat(device_template, sub_item["vendor"]:"NA", sub_item["product"]:"NA");
		    match = (value == table_item[2]:"NA");
		} else if(table_item[1]:"NA" != "device" && item["type"]:"NA" == "node"){
		    match = (item["name"]:"NA" == table_item[1]:"na" && item["value"]:"NA" == table_item[2]:"na");
		} else {
		    match = false;
		}
		return match;
	});
    map cur_item = config_item[0]:$[];
    if(cur_item == $[]) return;

    UI::OpenDialog(`VBox(
			build_edit_blacklist_terms(cur_item),
			`HSpacing(1),
			`HBox(
                            `PushButton(`id(`ok), Label::OKButton()),
                            `PushButton(`id(`cancel), `opt(`default), Label::CancelButton())
		)));
    update_edit_blacklist_items(cur_item);

    any ret = nil;
    map new_item = $[];
    while(true) {
        ret = UI::UserInput();
	if(replacewidget_notify == true)
	{
	    replacewidget_notify = false;
	    continue;
	}

	if (contains(blacklist_section_items, (symbol) ret) == true)
	{
	    /* do not handle, `ok will do with the value */
	    continue;
	} else if(ret == `ok) {
	    string type_str = cur_item["type"]:"";
	    if(type_str == "device") {
		new_item["name"] = UI::QueryWidget(`id(`blacklist_item), `Value);
		new_item["type"] = "device";
		string vendor_str = rm_quotes((string) UI::QueryWidget(`id(`vendor), `Value));
		string product_str = rm_quotes((string) UI::QueryWidget(`id(`product), `Value));
		map sub_item = $["vendor":vendor_str, "product":product_str];
		new_item["value"] = sub_item;
		new_item["id"] = cur_item["id"]:"";
	    } else if (type_str == "node") {
		string name_str = cur_item["name"]:"NA";
		symbol id = symbolof(toterm(name_str));
		new_item["type"] = "node";
		new_item["name"] = rm_quotes((string) UI::QueryWidget(`id(`blacklist_item), `Value));
		new_item["value"] = rm_quotes((string) UI::QueryWidget(`id(id), `Value));
		new_item["id"] = cur_item["id"]:"";
	    } else {
		Popup::Message(sformat("Unexpected item type %1", type_str));
	    }
	    if(check_bl_config(new_item) == true) {
		config_modified = true;
		blacklist_items = maplist(map item, blacklist_items, {
			boolean match = true;
			if(table_item[1]:"" == "device" && 
			   item["type"]:"" == "device") {
			    map sub_item = item["value"]:$[];
			    string value = sformat(device_template, sub_item["vendor"]:"NA", sub_item["product"]:"NA");
			    match = (item["name"]:"NA" == table_item[1]:"" && value == table_item[2]:"");
			} else if(table_item[1]:"" != "device" && 
				  item["type"]:"" == "node") {
			    match = (item["name"]:"NA" == table_item[1]:"" &&
					item["value"]:"NA" == table_item[2]:"");
			} else {
			    match = false;
			}
			return ((match) ? new_item : item);
		    });
		break;
	    }
        } else {
	    break;
        }
    }

    UI::CloseDialog();
    return ;
}

void Add_Blacklist_Dialog() {
    UI::OpenDialog(
		`VBox(
			`HBox(`HWeight(1,`ComboBox(`id(`add_blacklist_id), `opt(`notify), _("item"), [
					`item(`id(`combobox_bl_wwid_id), "wwid", true),
					`item(`id(`combobox_bl_devnode_id), "devnode"),
					`item(`id(`combobox_bl_device_id), "device")
				]))),
			`ReplacePoint(`id(`replace_bl_id), 
					`HBox(`TextEntry(`id(`edit_blacklist_wwid_id), `opt(`notify), _("wwid") ))
			),
			`HSpacing(1),
			`HBox(
			    `PushButton(`id(`ok), Label::OKButton()),
			    `PushButton(`id(`cancel), `opt(`default), Label::CancelButton())
	)));
    UI::ChangeWidget(`id(`edit_blacklist_wwid_id), `ValidChars, build_valid_chars("wwid"));
    UI::SetFocus(`id(`add_blacklist_id));

    map new_item = $[];
    string devnode_str = "";
    string vendor_str = "";
    string product_str = "";
    string wwid_str = "";	

    any ret = nil;
    while(true) {
	ret = UI::UserInput();
	if(ret == `add_blacklist_id) {
	    any value = UI::QueryWidget(`id(`add_blacklist_id), `Value);
	    if(value != nil && is(value, symbol)) {
		if(value == `combobox_bl_device_id) {
		    UI::ReplaceWidget(`id(`replace_bl_id), 
			    `VBox(`TextEntry(`id(`edit_blacklist_vendor_id), `opt(`notify), "vendor", vendor_str),
				    `TextEntry(`id(`edit_blacklist_product_id), `opt(`notify), "product", product_str)
		    ));
		    UI::ChangeWidget(`id(`edit_blacklist_vendor_id), `ValidChars, build_valid_chars("vendor"));
		    UI::ChangeWidget(`id(`edit_blacklist_product_id), `ValidChars, build_valid_chars("product"));
		} else if(value == `combobox_bl_wwid_id){
		    UI::ReplaceWidget(`id(`replace_bl_id),
			    `VBox(`TextEntry(`id(`edit_blacklist_wwid_id), `opt(`notify), "wwid", wwid_str)));
		    UI::ChangeWidget(`id(`edit_blacklist_wwid_id), `ValidChars, build_valid_chars("wwid"));
		} else if(value == `combobox_bl_devnode_id) {
		    UI::ReplaceWidget(`id(`replace_bl_id),
			    `VBox(`TextEntry(`id(`edit_blacklist_devnode_id), `opt(`notify), "devnode", devnode_str)));
		    UI::ChangeWidget(`id(`edit_blacklist_devnode_id), `ValidChars, build_valid_chars("devnode"));
		}
	    }
	} else if(ret == `ok) {
	    any value = UI::QueryWidget(`id(`add_blacklist_id), `Value);
	    if(value != nil && is(value, symbol)) {
		if(value == `combobox_bl_device_id) {
		    string vendor = nil;
		    string product = nil;
		    new_item["type"] = "device";
		    new_item["name"] = "device";
		    vendor = rm_quotes((string) UI::QueryWidget(`id(`edit_blacklist_vendor_id), `Value));
		    product = rm_quotes((string) UI::QueryWidget(`id(`edit_blacklist_product_id), `Value));
		    map sub_item = $["vendor":vendor, "product":product];
		    new_item["value"] = sub_item;
		} else if (value == `combobox_bl_wwid_id){
		    new_item["type"] = "node";
		    new_item["name"] = "wwid";
		    new_item["value"] = rm_quotes((string) UI::QueryWidget(`id(`edit_blacklist_wwid_id), `Value));
		} else if (value == `combobox_bl_devnode_id) {
		    new_item["type"] = "node";
		    new_item["name"] = "devnode";
		    new_item["value"] = rm_quotes((string) UI::QueryWidget(`id(`edit_blacklist_devnode_id), `Value));
		}
		string id = "0";
		id = get_newid(blacklist_items);
		new_item["id"] = id;
		if(check_bl_config(new_item) == true) {
		    config_modified = true;
		    blacklist_items = add(blacklist_items, new_item);
		    break;
		}
	    } else {
		Popup::Message(sformat("Invalid ret: %1", ret));
	    }
	} else if(ret == `edit_blacklist_vendor_id) {
	    vendor_str = rm_quotes((string) UI::QueryWidget(`id(`edit_blacklist_vendor_id), `Value));
	} else if(ret == `edit_blacklist_product_id) {
	    product_str = rm_quotes((string) UI::QueryWidget(`id(`edit_blacklist_product_id), `Value));
	} else if(ret == `edit_blacklist_devnode_id) {
	    devnode_str = rm_quotes((string) UI::QueryWidget(`id(`edit_blacklist_devnode_id), `Value));
	} else if(ret == `edit_blacklist_wwid_id) {
	   any str = nil;
	     str =  UI::QueryWidget(`id(`edit_blacklist_wwid_id), `Value);
	    wwid_str = rm_quotes((string) str);
	} else {
	    break;
	}
    }
    UI::CloseDialog();
    return;
}

any Blacklist_Dialog() {
    Wizard::SetContentsButtons(caption, contents, HELPS["Blacklist_help"]:"",
	    Label::BackButton(), Label::OKButton());
    UI::ReplaceWidget(`id(`contents_replace_id), blacklist_config);
    UI::ChangeWidget(`id(`blacklist_table_id), `Items, Build_BlacklistTable());

    any ret = nil;
    while(true) {
	ret = UI::UserInput();
	if(replacewidget_notify == true)
	{
	    replacewidget_notify = false;
	    continue;
	}
	if(ret == `blacklist_del_id) {
	    integer cur = (integer) UI::QueryWidget(`id(`blacklist_table_id), `CurrentItem);
	    term cur_item = (term) UI::QueryWidget(`id(`blacklist_table_id), `Item(cur));
	    delete_blacklist_item(cur_item);
	    UI::ChangeWidget(`id(`blacklist_table_id), `Items, Build_BlacklistTable());
	    continue;
	} else if(ret == `blacklist_edit_id || ret == `blacklist_table_id) {
            integer cur = (integer) UI::QueryWidget(`id(`blacklist_table_id), `CurrentItem);
            term cur_item = (term) UI::QueryWidget(`id(`blacklist_table_id), `Item(cur));
            Edit_Blacklist_Dialog(cur_item);
            UI::ChangeWidget(`id(`blacklist_table_id), `Items, Build_BlacklistTable());
            UI::ChangeWidget(`id(`blacklist_table_id), `CurrentItem, cur);
	    continue;
	} else if(ret == `blacklist_add_id) {
            Add_Blacklist_Dialog();
            UI::ChangeWidget(`id(`blacklist_table_id), `Items, Build_BlacklistTable());
	    continue;
	} else {
		break;
	}
    }
    return ret;
}


void delete_blacklist_exception_item(term table_item) {
    blacklist_exception_items = filter(map e, blacklist_exception_items, {
			boolean match = true;
			string value = nil;
			if(table_item[1]:"NA" == "device" && e["type"]:"NA" == "device") {
			    map sub_e = e["value"]:$[];
			    if(sub_e != $[]){
				value = sformat(device_template, sub_e["vendor"]:"NA", sub_e["product"]:"NA");
				match = (e["name"]:"NA" == table_item[1]:"na" &&
					value == table_item[2]:"na");
			    } 
			} else if(e["type"]:"NA" == "node"){
			    match = (e["name"]:"NA" == table_item[1]:"na" && e["value"]:"NA" == table_item[2]:"na");
			} else {
			    match = false;
			}
			if(match == true)
			    config_modified = true;
			return (!match);
		});
}

boolean check_ble_config(map item) {
    string prop_info = _("Illegal parameters:") + "\n";
    string type_str = "";
    boolean result = false;
    map ret = $[];
    map item_map = $[];
    map (map) check_handler = (map (map)) nil;

    type_str = item["type"]:"";
    if (type_str == "device")
    {
	map sub_item = item["value"]:$[];
	if (sub_item == $[])
	{
	    Popup::Message(sformat("can not find sub_item from %1", item));
	    return false;
	}
	string vendor_str = sub_item["vendor"]:"";
	string product_str = sub_item["product"]:"";

	check_handler = check_handlers[`vendor]:(map (map))nil;
	if (check_handler == nil)
	{
	    Popup::Message("check handler for `vendor does not exist");
	    return false;
	}
	item_map["vendor"] = vendor_str;
	ret = check_handler(item_map);
	result = ret["result"]:false;
	if (result == false)
	    prop_info = prop_info + ret["info"]:"";

	check_handler = check_handlers[`product]:(map (map))nil;
	if (check_handler == nil)
	{
	    Popup::Message("check handler for `product does not exist");
	    return false;
	}
	item_map["product"] = product_str;
	ret = check_handler(item_map);
	result = ret["result"]:false;
	if (result == false)
	    prop_info = prop_info + ret["info"]:"";
    } else if (type_str == "node") {
	string name_str = item["name"]:"NA";
	string value_str = item["value"]:"";
	symbol item_name = symbolof(toterm(name_str));
	check_handler = check_handlers[item_name]:(map (map))nil;
	if (check_handler == nil)
	{
	    Popup::Message(sformat("check handler for %1 does not exist", item_name));
	    return false;
	}
	item_map[name_str] = value_str;
	ret = check_handler(item_map);
	result = ret["result"]:false;
	if (result == false)
	    prop_info = prop_info + ret["info"]:"";
    } else {
	Popup::Message(sformat("check_ble_config: unexpected type %1", type_str));
	return false;
    }

    if (result == false)
    {
	Popup::Message(prop_info);
	return result;
    }
    foreach(map e, blacklist_exception_items, {
	if (e == $[])
	{
	    result = true;
	    break;
	}
	if(e["id"]:"" == item["id"]:"na") 
	    return;
	if(e["type"]:"" == "device") {
	    map sub_e = e["value"]:$[];
	    map sub_item = item["value"]:$[];
	    if(sub_e != $[] && sub_item != $[]) {
		if(sub_item["vendor"]:"NA" == sub_e["vendor"]:"" && 
		   sub_item["product"]:"NA" == sub_e["product"]:"")
		{
		    result = false;
		    break;
		}
	    }
	} else {
	    if(item["name"]:"NA" == e["name"]:"" && 
		item["value"]:"NA"  == e["value"]:"") 
	    {
		result = false;
		break;
	    }		
	}
    }); 

    if(result == false) 
	Popup::Message(_("Duplicated configuration."));

    return result;
}

term build_edit_blacklist_exception_terms(map item)
{
    term ret = `Empty();
    string type_str = item["type"]:"";
    if (type_str == "node")
    {
	string name_str = item["name"]:"NA";
	symbol item_name = symbolof(toterm(name_str));
	term (symbol) build_handler = 
		build_term_handlers[item_name]:(term (symbol))nil;
	if (build_handler == nil)
	{
	    Popup::Message(sformat(
		"build_edit_blacklist_terms: build handler for %1 does not exist", item_name));
	} else {
	    ret = `VBox(
		    `HBox(`TextEntry(`id(`blacklist_item), _("item"), "")),
		    `HBox(build_handler(`all))
		);
	}
    } else if (type_str == "device") {
	ret = `VBox(
		`HBox(`TextEntry(`id(`blacklist_item), _("item"), "")),
		`HBox(build_vendor_term(`all)),
		`HBox(build_product_term(`all))
		);
    } else {
	Popup::Message(sformat("build_edit_blacklist_terms: unexpected type %1", type_str));
    }
    return ret;
}

void update_edit_blacklist_exception_items(map item)
{
    string type_str = item["type"]:"NA";
    map map_item = $[];

    if (type_str == "device")
    {
	UI::ChangeWidget(`id(`blacklist_item), `Value, "device");
	UI::ChangeWidget(`id(`blacklist_item), `Enabled, false);

	map sub_item = item["value"]:$[];
	if (sub_item == $[])
	{
	    Popup::Message(sformat("No value in subitem `%1'", item));
	    return;
	}
	string vendor_str = sub_item["vendor"]:"";
	string product_str = sub_item["product"]:"";
	if (contains(blacklist_section_items, `vendor) == false ||
	    contains(blacklist_section_items, `product) == false)
	{
	    Popup::Message("`vendor or `product is not in valid blacklist items");
	    return;
        }
	void (map) update_handler = update_term_handlers[`vendor]:(void (map))nil;
	if (update_handler == nil)
	{
	    Popup::Message("update_edit_blacklist_items: update handler for `vendor does not exist");
	    return;
	} else {
	    map map_item = $[];
	    map_item["vendor"] = vendor_str;
	    update_handler(map_item);
	}
	update_handler = update_term_handlers[`product]:(void (map))nil;
	if (update_handler == nil)
	{
	    Popup::Message("update_edit_blacklist_items: update handler for `product does not exist");
	    return;
	} else {
	    map map_item = $[];
	    map_item["product"] = product_str;
	    update_handler(map_item);
	}
    } else {
	string name_str = item["name"]:"NA";
	string value_str = item["value"]:"";
	map_item[name_str] = value_str;
	symbol item_name = symbolof(toterm(name_str));

	UI::ChangeWidget(`id(`blacklist_item), `Value, name_str);
	UI::ChangeWidget(`id(`blacklist_item), `Enabled, false);

	if (contains(blacklist_section_items, item_name) == true)
	{
	    void (map) update_handler = update_term_handlers[item_name]:(void (map))nil;
	    if (update_handler != nil)
		update_handler(map_item);
	    else
		Popup::Message(sformat(
		    "update_edit_blacklist_items: update handler for %1 does not exist", item_name));
	} else {
	    Popup::Message(sformat("item %1 is not in valid blacklist items", item_name));
	}
    }
}

void Edit_Blacklist_Exception_Dialog(term table_item) {
    list<map> config_item = filter(map item, blacklist_exception_items, {
		boolean match = true;
		if(table_item[1]:"NA" == "device" && item["type"]:"NA" == "device" ) {
		    map sub_item = item["value"]:$[];
		    string value = sformat(device_template, sub_item["vendor"]:"NA", sub_item["product"]:"NA");
		    match = (value == table_item[2]:"NA");
		} else if(table_item[1]:"NA" != "device" && item["type"]:"NA" == "node"){
		    match = (item["name"]:"NA" == table_item[1]:"na" && item["value"]:"NA" == table_item[2]:"na");
		} else {
		    match = false;
		}
		return match;
	});
    map cur_item = config_item[0]:$[];
    if(cur_item == $[]) return;

    UI::OpenDialog(`VBox(
			build_edit_blacklist_exception_terms(cur_item),
			`HSpacing(1),
			`HBox(
                            `PushButton(`id(`ok), Label::OKButton()),
                            `PushButton(`id(`cancel), `opt(`default), Label::CancelButton())
		)));
    update_edit_blacklist_exception_items(cur_item);

    any ret = nil;
    map new_item = $[];
    while(true) {
        ret = UI::UserInput();
	if(replacewidget_notify == true)
	{
	    replacewidget_notify = false;
	    continue;
	}

	if (contains(blacklist_section_items, (symbol) ret) == true)
	{
	    /* do not handle, `ok will do with the value */
	    continue;
	} else if(ret == `ok) {
	    string type_str = cur_item["type"]:"";
	    if(type_str == "device") {
		new_item["name"] = UI::QueryWidget(`id(`blacklist_item), `Value);
		new_item["type"] = "device";
		string vendor_str = rm_quotes((string) UI::QueryWidget(`id(`vendor), `Value));
		string product_str = rm_quotes((string) UI::QueryWidget(`id(`product), `Value));
		map sub_item = $["vendor":vendor_str, "product":product_str];
		new_item["value"] = sub_item;
		new_item["id"] = cur_item["id"]:"";
	    } else if (type_str == "node") {
		string name_str = cur_item["name"]:"NA";
		symbol id = symbolof(toterm(name_str));
		new_item["type"] = "node";
		new_item["name"] = rm_quotes((string) UI::QueryWidget(`id(`blacklist_item), `Value));
		new_item["value"] = rm_quotes((string) UI::QueryWidget(`id(id), `Value));
		new_item["id"] = cur_item["id"]:"";
	    } else {
		Popup::Message(sformat("Unexpected item type %1", type_str));
	    }
	    if(check_ble_config(new_item) == true) {
		config_modified = true;
		blacklist_exception_items = maplist(map item, blacklist_exception_items, {
			boolean match = true;
			if(table_item[1]:"" == "device" && 
			   item["type"]:"" == "device") {
			    map sub_item = item["value"]:$[];
			    string value = sformat(device_template, sub_item["vendor"]:"NA", sub_item["product"]:"NA");
			    match = (item["name"]:"NA" == table_item[1]:"" && value == table_item[2]:"");
			} else if(table_item[1]:"" != "device" && 
				  item["type"]:"" == "node") {
			    match = (item["name"]:"NA" == table_item[1]:"" &&
					item["value"]:"NA" == table_item[2]:"");
			} else {
			    match = false;
			}
			return ((match) ? new_item : item);
		    });
		break;
	    }
        } else {
	    break;
        }
    }

    UI::CloseDialog();
    return ;
}


void Add_Blacklist_Exception_Dialog() {
    UI::OpenDialog(
		`VBox(
			`HBox(`HWeight(1,`ComboBox(`id(`add_blacklist_id), `opt(`notify), _("item"), [
					`item(`id(`combobox_bl_wwid_id), "wwid", true),
					`item(`id(`combobox_bl_devnode_id), "devnode"),
					`item(`id(`combobox_bl_device_id), "device")
				]))),
			`ReplacePoint(`id(`replace_bl_id), 
					`HBox(`TextEntry(`id(`edit_blacklist_wwid_id), `opt(`notify), _("wwid") ))
			),
			`HSpacing(1),
			`HBox(
			    `PushButton(`id(`ok), Label::OKButton()),
			    `PushButton(`id(`cancel), `opt(`default), Label::CancelButton())
	)));
    UI::ChangeWidget(`id(`edit_blacklist_wwid_id), `ValidChars, build_valid_chars("wwid"));
    UI::SetFocus(`id(`add_blacklist_id));

    map new_item = $[];
    string devnode_str = "";
    string vendor_str = "";
    string product_str = "";
    string wwid_str = "";	

    any ret = nil;
    while(true) {
	ret = UI::UserInput();
	if(ret == `add_blacklist_id) {
	    any value = UI::QueryWidget(`id(`add_blacklist_id), `Value);
	    if(value != nil && is(value, symbol)) {
		if(value == `combobox_bl_device_id) {
		    UI::ReplaceWidget(`id(`replace_bl_id), 
			    `VBox(`TextEntry(`id(`edit_blacklist_vendor_id), `opt(`notify), "vendor", vendor_str),
				    `TextEntry(`id(`edit_blacklist_product_id), `opt(`notify), "product", product_str)
		    ));
		    UI::ChangeWidget(`id(`edit_blacklist_vendor_id), `ValidChars, build_valid_chars("vendor"));
		    UI::ChangeWidget(`id(`edit_blacklist_product_id), `ValidChars, build_valid_chars("product"));
		} else if(value == `combobox_bl_wwid_id){
		    UI::ReplaceWidget(`id(`replace_bl_id),
			    `VBox(`TextEntry(`id(`edit_blacklist_wwid_id), `opt(`notify), "wwid", wwid_str)));
		    UI::ChangeWidget(`id(`edit_blacklist_wwid_id), `ValidChars, build_valid_chars("wwid"));
		} else if(value == `combobox_bl_devnode_id) {
		    UI::ReplaceWidget(`id(`replace_bl_id),
			    `VBox(`TextEntry(`id(`edit_blacklist_devnode_id), `opt(`notify), "devnode", devnode_str)));
		    UI::ChangeWidget(`id(`edit_blacklist_devnode_id), `ValidChars, build_valid_chars("devnode"));
		}
	    }
	} else if(ret == `ok) {
	    any value = UI::QueryWidget(`id(`add_blacklist_id), `Value);
	    if(value != nil && is(value, symbol)) {
		if(value == `combobox_bl_device_id) {
		    string vendor = nil;
		    string product = nil;
		    new_item["type"] = "device";
		    new_item["name"] = "device";
		    vendor = rm_quotes((string) UI::QueryWidget(`id(`edit_blacklist_vendor_id), `Value));
		    product = rm_quotes((string) UI::QueryWidget(`id(`edit_blacklist_product_id), `Value));
		    map sub_item = $["vendor":vendor, "product":product];
		    new_item["value"] = sub_item;
		} else if (value == `combobox_bl_wwid_id){
		    new_item["type"] = "node";
		    new_item["name"] = "wwid";
		    new_item["value"] = rm_quotes((string) UI::QueryWidget(`id(`edit_blacklist_wwid_id), `Value));
		} else if (value == `combobox_bl_devnode_id) {
		    new_item["type"] = "node";
		    new_item["name"] = "devnode";
		    new_item["value"] = rm_quotes((string) UI::QueryWidget(`id(`edit_blacklist_devnode_id), `Value));
		}
		string id = "0";
		id = get_newid(blacklist_exception_items);
		new_item["id"] = id;
		if(check_ble_config(new_item) == true) {
		    config_modified = true;
		    blacklist_exception_items = add(blacklist_exception_items, new_item);
		    break;
		}
	    } else {
		Popup::Message(sformat("Invalid ret: %1", ret));
	    }
	} else if(ret == `edit_blacklist_vendor_id) {
	    vendor_str = rm_quotes((string) UI::QueryWidget(`id(`edit_blacklist_vendor_id), `Value));
	} else if(ret == `edit_blacklist_product_id) {
	    product_str = rm_quotes((string) UI::QueryWidget(`id(`edit_blacklist_product_id), `Value));
	} else if(ret == `edit_blacklist_devnode_id) {
	    devnode_str = rm_quotes((string) UI::QueryWidget(`id(`edit_blacklist_devnode_id), `Value));
	} else if(ret == `edit_blacklist_wwid_id) {
	   any str = nil;
	     str =  UI::QueryWidget(`id(`edit_blacklist_wwid_id), `Value);
	    wwid_str = rm_quotes((string) str);
	} else {
	    break;
	}
    }
    UI::CloseDialog();
    return;
}


any Blacklist_Exception_Dialog() {
    Wizard::SetContentsButtons(caption, contents, HELPS["Blacklist_Exception_help"]:"",
	    Label::BackButton(), Label::OKButton());
    UI::ReplaceWidget(`id(`contents_replace_id), blacklist_exception_config);
    UI::ChangeWidget(`id(`blacklist_table_id), `Items, Build_BlacklistException_Table());

    any ret = nil;
    while(true) {
	ret = UI::UserInput();
	if(ret == `blacklist_del_id) {
	    integer cur = (integer) UI::QueryWidget(`id(`blacklist_table_id), `CurrentItem);
	    term cur_item = (term) UI::QueryWidget(`id(`blacklist_table_id), `Item(cur));
	    delete_blacklist_exception_item(cur_item);
	    UI::ChangeWidget(`id(`blacklist_table_id), `Items, Build_BlacklistException_Table());
	    continue;
	} else if(ret == `blacklist_edit_id || ret == `blacklist_table_id) {
            integer cur = (integer) UI::QueryWidget(`id(`blacklist_table_id), `CurrentItem);
            term cur_item = (term) UI::QueryWidget(`id(`blacklist_table_id), `Item(cur));
            Edit_Blacklist_Exception_Dialog(cur_item);
            UI::ChangeWidget(`id(`blacklist_table_id), `Items, Build_BlacklistException_Table());
            UI::ChangeWidget(`id(`blacklist_table_id), `CurrentItem, cur);
	    continue;
	} else if(ret == `blacklist_add_id) {
            Add_Blacklist_Exception_Dialog();
            UI::ChangeWidget(`id(`blacklist_table_id), `Items, Build_BlacklistException_Table());
	    continue;
	} else {
		break;
	}
    }
    return ret;
}

term build_device_details() {
    term confs_term = `VBox(`Empty());
    integer counter = 0;
    integer item_per_line = 2;
    term line = `HBox(`Empty());

    foreach(symbol item_symbol, device_detail_items, {
	term (symbol) build_handler = build_term_handlers[item_symbol]:(term (symbol))nil;
	if (build_handler == nil)
	{
	    Popup::Message(sformat("build term handler for %1 does not exist", item_symbol));
	    return;
	}
	line = add(line, `HWeight(1, build_handler(`all)));
	counter = counter + 1;
	if ((counter % item_per_line) == 0)
	{
	    confs_term = add(confs_term, line);
	    line = `HBox(`Empty());
	}
    });
    return confs_term;
}

void update_device_details(map item) {
    foreach(symbol item_symbol, device_detail_items, {
	void (map) update_handler = update_term_handlers[item_symbol]:(void (map))nil;
	if (update_handler == nil)
	{
	    Popup::Message(sformat("update term handler for %1 does not exist", item_symbol));
	    return;
	}
	update_handler(item);
    });
}

/* check if user input is legal, and popup necessary information */
boolean check_dv_config(map item) {
    boolean result = true;
    string prop_info = _("Illegal parameters:\n");

    foreach(symbol item_name, device_brief_items, {
	map ret = $[];
	map (map) check_handler = check_handlers[item_name]:(map (map))nil;
	if (check_handler != nil)
	{
	    ret = check_handler(item);
	    if (ret == nil)
	    {
		Popup::Message(sformat("check handler for %1 is not implemented yet", item_name));
	    } else if (ret["result"]:false == false) {
		prop_info = prop_info + ret["info"]:"";
		result = false;
	    }
	} else {
	    Popup::Message(sformat("check handler does not exist for %1", item_name));
	}
    });

    if(result == false)
    {
	Popup::Message(prop_info);
	return result;
    }

    foreach(symbol item_name, device_detail_items, {
	map ret = $[];
	map (map) check_handler = check_handlers[item_name]:(map (map))nil;
	if (check_handler != nil)
	{
	    ret = check_handler(item);
	    if (ret == nil)
	    {
		Popup::Message(sformat("check handler for %1 is not implemented yet", item_name));
	    } else if (ret["result"]:false == false) {
		prop_info = prop_info + ret["info"]:"";
		result = false;
	    }
	} else {
	    Popup::Message(sformat("check handler does not exist for %1", item_name));
	}
    });

    if(result == false)
    {
	Popup::Message(prop_info);
	return result;
    }

    /* duplicated configuraton checking */
    foreach(map e, multipaths_items, {
        if(e["id"]:"NA" != item["id"]:"na" &&
                (e["wwid"]:"NA" == item["wwid"]:"na"))
        {
            prop_info = _("Duplicated configuration.");
            Popup::Message(prop_info);
            result = false;
            break;
        }
    });

    /* duplicated configuraton checking */
    string vendor_str = item["vendor"]:"";
    string product_str = item["product"]:"";
    foreach(map e, devices_items, {
	if(e["id"]:"NA" != item["id"]:"na" &&
		vendor_str == e["vendor"]:"NA" &&
		product_str == e["product"]:"NA")
	{
	    prop_info = _("Duplicated configuration");
	    Popup::Message(prop_info);
	    result = false;
	    break;
	}
    });
    return result;
}


/*
    if table_item == nil, means add a new item	
*/
void Edit_Devices_Dialog(term table_item) {

    map cur_item = $[];
    if(table_item != nil) {
	list<map> config_item = filter( map item, devices_items, {
				boolean match = (item["vendor"]:"NA" == table_item[1]:"na" &&
						 item["product"]:"NA" == table_item[2]:"na");
				return match;
			});
	cur_item = config_item[0]:nil;
	if(cur_item == nil) return nil;
    }

    /* used for store undecided input */
    map temp_cur_item = cur_item;
    temp_cur_item["id"] = (cur_item == $[]) ?
		get_newid(devices_items):cur_item["id"]:"0";

    term devices_item_edit = `VBox(
				    `HWeight(1, `HBox(build_vendor_term(`all))),
				    `HWeight(1, `HBox(build_product_term(`all))),
				    `HWeight(1, `HBox(build_product_blacklist_term(`all))),
				    `VBox(`ReplacePoint(`id(`replace_devices_id),
							`VBox(`Left(`HBox(`CheckBox(`id(`show_details_id), 
										`opt(`notify), 
										_("Show Details"), 
										false
					)))))));
    UI::OpenDialog(`VBox(
			devices_item_edit,
			`HSpacing(1),
			`HBox(
			    `PushButton(`id(`ok), `opt(`default), Label::OKButton()),
			    `PushButton(`id(`cancel), Label::CancelButton())
		)));
    update_vendor_term(temp_cur_item);
    update_product_term(temp_cur_item);
    update_product_blacklist_term(temp_cur_item);
    UI::SetFocus(`id(`product_blacklist));
    temp_string_values = $[];
    
    any ret = nil;
    while(true) {
	ret = UI::UserInput();
	if (replacewidget_notify == true)
	{
	    replacewidget_notify = false;
	    continue;
	}
	if(ret == `show_details_id) {
	    boolean checked = (boolean) UI::QueryWidget(`id(`show_details_id), `Value);
	    if(checked == true) {
		UI::ReplaceWidget(`id(`replace_devices_id), 
				`VBox(`Left(`HBox(`CheckBox(`id(`show_details_id),
								`opt(`notify),
								_("Show Details"),
								true
						))),
					build_device_details()
		));
		update_device_details(temp_cur_item);
	    } else {
		UI::ReplaceWidget(`id(`replace_devices_id), 
				`VBox(`Left(`HBox(`CheckBox(`id(`show_details_id),
								`opt(`notify),
								_("Show Details"),
								false
						)))));
	    }
	} else if (contains(device_detail_items, (symbol) ret) == true ||
		    contains(device_brief_items, (symbol) ret) == true ) {
	    map (map) device_handler = default_item_handlers[(symbol) ret]:(map (map))nil;
	    if (device_handler != nil)
		temp_cur_item = device_handler(temp_cur_item);
	    else
		Popup::Message(sformat("can not find handler for %1", (symbol) ret));
	} else if(ret == `ok) {
	    temp_cur_item["vendor"] = rm_quotes(temp_cur_item["vendor"]:"");
	    temp_cur_item["product"] = rm_quotes(temp_cur_item["product"]:"");
	    if(check_dv_config(temp_cur_item) == true) {
		config_modified = true;
		cur_item = temp_cur_item;
		if(table_item != nil) 
		{
		    devices_items = maplist( map item, devices_items, {
                                if(table_item[1]:"NA" == item["vendor"]:"na" &&
				   table_item[2]:"NA" == item["product"]:"na") {
					return cur_item;
				} else {
                                    return item;
				}
			});
		} else {
		    devices_items = add(devices_items, cur_item);
		}
		break;
	    }
	} else {
	    break;
	}
    }

    UI::CloseDialog();
    return ;
}




any Devices_Dialog() {
    Wizard::SetContentsButtons(caption, contents, HELPS["Devices_help"]:"",
	    Label::BackButton(), Label::OKButton());
    UI::ReplaceWidget(`id(`contents_replace_id), devices_config);
    UI::ChangeWidget(`id(`devices_table_id), `Items, Build_DevicesTable());

    any ret = nil;
    while(true) {
	ret = UI::UserInput();
	if(ret == `devices_del_id) {
	    integer cur = (integer) UI::QueryWidget(`id(`devices_table_id), `CurrentItem);
	    term cur_item = (term) UI::QueryWidget(`id(`devices_table_id), `Item(cur));
	    devices_items = filter(map item, devices_items, {
			boolean match = (item["vendor"]:"NA" == cur_item[1]:"na" &&
                                        item["product"]:"NA" == cur_item[2]:"na");
                        if(match == true)
                            config_modified = true;
                        return (!match);
                });
	    UI::ChangeWidget(`id(`devices_table_id), `Items, Build_DevicesTable());
	    continue;
	} else if(ret == `devices_edit_id || ret == `devices_table_id) {
	    integer cur = (integer) UI::QueryWidget(`id(`devices_table_id), `CurrentItem);
	    term cur_item = (term) UI::QueryWidget(`id(`devices_table_id), `Item(cur));
	    Edit_Devices_Dialog(cur_item);
	    UI::ChangeWidget(`id(`devices_table_id), `Items, Build_DevicesTable());
            UI::ChangeWidget(`id(`devices_table_id), `CurrentItem, cur);
	    continue;
	} else if(ret == `devices_add_id) {
	    integer cur = (integer) UI::QueryWidget(`id(`devices_table_id), `CurrentItem);
	    Edit_Devices_Dialog(nil);
	    UI::ChangeWidget(`id(`devices_table_id), `Items, Build_DevicesTable());
            UI::ChangeWidget(`id(`devices_table_id), `CurrentItem, cur);
	    continue;
	} else {
		break;
	}
    }
    return ret;
}


void Update_Service_Status() {
	integer ret = 0;
	if (Mode::normal() && Stage::normal()) {
		ret = Service::Status("multipathd");
	} else {
		ret = (integer)SCR::Execute(.target.bash, "/bin/ps -A -o comm | grep -q multipathd");
	}
    if (ret == 0) {
        UI::ChangeWidget(`id(`stop_multipath), `Value, false);
        UI::ChangeWidget(`id(`start_multipath), `Value, true);
        service_status = 1;
    } else {
        UI::ChangeWidget(`id(`stop_multipath), `Value, true);
        UI::ChangeWidget(`id(`start_multipath), `Value, false);
        service_status = 0;
    }

    ret = (integer) SCR::Execute(.target.bash, "/sbin/multipath -l");
    string info = "";
    if(ret == 127) {
	info = _("Can not find /sbin/multipath");
    /* "multipath -l" will display usable information even returns 1 to bash */
    } else if (ret == 0 || ret == 1) {
	map result = $[];
	result = (map) SCR::Execute(.target.bash_output, "/sbin/multipath -l");
	info = (string) result["stdout"]:"Failed to run /sbin/multipath\n";
    } else {
	info = "Failed to run multipath, error number:\n";
	info =  info + sformat("%1\n", ret);
    }
    /* "multipath -l" may returns "" to bash */
    if(size(info) == 0) {
	info = "No multipath information found\n";
    }
    UI::ChangeWidget(`id(`status_summary_id), `Value, info);	
}

void CallInsserv( boolean on, string name )
{
	y2milestone( "CallInsserv on:%1 name:%2", on, name );
	string scrname = "/etc/init.d/" + name;
	if( SCR::Read( .target.size, scrname )>0 )
	{
		string cmd = "cd / && /sbin/insserv ";
		if( !on )
			cmd = cmd + "-r ";
		cmd = cmd + scrname;
		y2milestone( "CallInsserv cmd %1", cmd );
		map bo = (map)SCR::Execute (.target.bash_output, cmd );
		y2milestone( "CallInsserv bo %1", bo );
	}
}

void Start_Service() {
    if (service_status == 1)
	return;
    string prop_info = _("Use multipath failed:") + "\n";

	if (Mode::normal() && Stage::normal()) {
		boolean ret = Service::Enable("boot.multipath");
		if (ret == false)
		{
			prop_info = prop_info + _("* Cannot enable boot.multipath.") + "\n";
			Popup::Message(prop_info);
			Update_Service_Status();
			return;
		}
		ret = Service::Enable("multipathd");
		if (ret == false)
		{
			prop_info = prop_info + _("* Cannot enable multipathd.") + "\n";
			Popup::Message(prop_info);
			Update_Service_Status();
			return;
		}
		/* do not check result for starting boot.multipath */
		ret = Service::Start("boot.multipath");
		ret = Service::Start("multipathd");
		if (ret == false)
		{
			prop_info = prop_info + _("* Cannot start multipathd.") + "\n";
			Popup::Message(prop_info);
			Update_Service_Status();
			return;
		}

	} else {
//		CallInsserv(true, "boot.multipath");
//		CallInsserv(true, "multipathd");
		Storage::ActivateMultipath(true);
	}

    service_status = 1;
    Update_Service_Status();
}

void Stop_Service() {
    if (service_status == 0)
	return;
    string prop_info = _("Do not use multipath failed:") + "\n";

	if (Mode::normal() && Stage::normal()) {
		boolean ret = Service::Stop("multipathd");
		if (ret == false)
		{
			prop_info = prop_info + _("* Cannot stop multipath.") + "\n";
			Popup::Message(prop_info);
			Update_Service_Status();
			return;
		}
		/* do not check result of stopping boot.multipath */
		ret = Service::Stop("boot.multipath");
		ret = Service::Disable("multipathd");
		if (ret == false)
		{
			prop_info = prop_info + _("* Cannot disable multipathd.") + "\n";
			Popup::Message(prop_info);
			Update_Service_Status();
			return;
		}
		ret = Service::Disable("boot.multipath");
		if (ret == false)
		{
			prop_info = prop_info + _("* Cannot disable boot.multipath.") + "\n";
			Popup::Message(prop_info);
			Update_Service_Status();
			return;
		}

	} else {
		Storage::ActivateMultipath(false);
//		CallInsserv(false, "multipathd");
//		CallInsserv(false, "boot.multipath");
	}

    service_status = 0;
    Update_Service_Status();
}

}
